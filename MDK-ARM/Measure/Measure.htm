<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Measure\Measure.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Measure\Measure.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Fri Dec 29 23:05:14 2017
<BR><P>
<H3>Maximum Stack Usage =        832 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
StartTButtonTask &rArr; _ExecCalibration &rArr; GUI_Delay &rArr; GUI_Exec &rArr; GUI_Exec1 &rArr; WM_Exec &rArr; WM_Exec1 &rArr; _DrawNext &rArr; _Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">CAN1_RX0_IRQHandler</a><BR>
 <LI><a href="#[25d]">WM__ForEachDesc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25c]">WM_ForEachDesc</a><BR>
 <LI><a href="#[27e]">WM_ResizeWindow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[280]">WM__UpdateChildPositions</a><BR>
 <LI><a href="#[296]">_MoveDescendents</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[296]">_MoveDescendents</a><BR>
 <LI><a href="#[2c4]">_Findy1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c4]">_Findy1</a><BR>
 <LI><a href="#[2c6]">_Findx1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c6]">_Findx1</a><BR>
 <LI><a href="#[2c5]">_Findx0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c5]">_Findx0</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[299]">_PaintTransChildren</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[299]">_PaintTransChildren</a><BR>
 <LI><a href="#[277]">WM_InvalidateWindowDescs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[277]">WM_InvalidateWindowDescs</a><BR>
 <LI><a href="#[260]">_GetDialogItem</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[260]">_GetDialogItem</a><BR>
 <LI><a href="#[257]">_DeleteAllChildren</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[253]">WM_DeleteWindow</a><BR>
 <LI><a href="#[6c]">StartTouchTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c]">StartTouchTask</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[282]">_Screen2hWin</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[282]">_Screen2hWin</a><BR>
 <LI><a href="#[197]">_Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[197]">_Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from stm32f4xx_it.o(i.ADC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">BUTTON_Callback</a> from button.o(i.BUTTON_Callback) referenced from button.o(i.BUTTON_CreateEx)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream0_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">GUIMONO_DispChar</a> from guicharm.o(i.GUIMONO_DispChar) referenced 2 times from f6x8.o(.constdata)
 <LI><a href="#[72]">GUIMONO_GetCharDistX</a> from guicharm.o(i.GUIMONO_GetCharDistX) referenced 2 times from f6x8.o(.constdata)
 <LI><a href="#[73]">GUIMONO_GetFontInfo</a> from guicharm.o(i.GUIMONO_GetFontInfo) referenced 2 times from f6x8.o(.constdata)
 <LI><a href="#[74]">GUIMONO_IsInFont</a> from guicharm.o(i.GUIMONO_IsInFont) referenced 2 times from f6x8.o(.constdata)
 <LI><a href="#[75]">GUIPROP_DispChar</a> from guicharp.o(i.GUIPROP_DispChar) referenced 3 times from f13_1.o(.constdata)
 <LI><a href="#[76]">GUIPROP_GetCharDistX</a> from guicharp.o(i.GUIPROP_GetCharDistX) referenced 3 times from f13_1.o(.constdata)
 <LI><a href="#[77]">GUIPROP_GetFontInfo</a> from guicharp.o(i.GUIPROP_GetFontInfo) referenced 3 times from f13_1.o(.constdata)
 <LI><a href="#[78]">GUIPROP_IsInFont</a> from guicharp.o(i.GUIPROP_IsInFont) referenced 3 times from f13_1.o(.constdata)
 <LI><a href="#[89]">GUI_MEMDEV__Color2Index</a> from guidev.o(i.GUI_MEMDEV__Color2Index) referenced from guidev_16.o(.constdata)
 <LI><a href="#[8b]">GUI_MEMDEV__GetIndexMask</a> from guidev.o(i.GUI_MEMDEV__GetIndexMask) referenced from guidev_16.o(.constdata)
 <LI><a href="#[91]">GUI_MEMDEV__GetRect</a> from guidev.o(i.GUI_MEMDEV__GetRect) referenced from guidev_16.o(.constdata)
 <LI><a href="#[8a]">GUI_MEMDEV__Index2Color</a> from guidev.o(i.GUI_MEMDEV__Index2Color) referenced from guidev_16.o(.constdata)
 <LI><a href="#[95]">GUI_USAGE_BM_AddHLine</a> from guidev_usagebm.o(i.GUI_USAGE_BM_AddHLine) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[94]">GUI_USAGE_BM_AddPixel</a> from guidev_usagebm.o(i.GUI_USAGE_BM_AddPixel) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[96]">GUI_USAGE_BM_Clear</a> from guidev_usagebm.o(i.GUI_USAGE_BM_Clear) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[98]">GUI_USAGE_BM_GetNextDirty</a> from guidev_usagebm.o(i.GUI_USAGE_BM_GetNextDirty) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">LCD_DrawHLine</a> from lcd.o(i.LCD_DrawHLine) referenced from guicore.o(.constdata)
 <LI><a href="#[70]">LCD_DrawPixel</a> from lcd.o(i.LCD_DrawPixel) referenced from guicore.o(.constdata)
 <LI><a href="#[7d]">LCD_L0_Color2Index</a> from lcd_l0_generic.o(i.LCD_L0_Color2Index) referenced from lcd_api.o(.constdata)
 <LI><a href="#[80]">LCD_L0_DrawBitmap</a> from glcd_ucgui.o(i.LCD_L0_DrawBitmap) referenced from lcd_api.o(.constdata)
 <LI><a href="#[81]">LCD_L0_DrawHLine</a> from glcd_ucgui.o(i.LCD_L0_DrawHLine) referenced from lcd_api.o(.constdata)
 <LI><a href="#[82]">LCD_L0_DrawVLine</a> from glcd_ucgui.o(i.LCD_L0_DrawVLine) referenced from lcd_api.o(.constdata)
 <LI><a href="#[83]">LCD_L0_FillRect</a> from glcd_ucgui.o(i.LCD_L0_FillRect) referenced from lcd_api.o(.constdata)
 <LI><a href="#[7f]">LCD_L0_GetIndexMask</a> from lcd_l0_generic.o(i.LCD_L0_GetIndexMask) referenced from lcd_api.o(.constdata)
 <LI><a href="#[84]">LCD_L0_GetPixelIndex</a> from glcd_ucgui.o(i.LCD_L0_GetPixelIndex) referenced from lcd_api.o(.constdata)
 <LI><a href="#[85]">LCD_L0_GetRect</a> from lcd_l0_generic.o(i.LCD_L0_GetRect) referenced from lcd_api.o(.constdata)
 <LI><a href="#[7e]">LCD_L0_Index2Color</a> from lcd_l0_generic.o(i.LCD_L0_Index2Color) referenced from lcd_api.o(.constdata)
 <LI><a href="#[88]">LCD_L0_SetLUTEntry</a> from glcd_ucgui.o(i.LCD_L0_SetLUTEntry) referenced from lcd_api.o(.constdata)
 <LI><a href="#[86]">LCD_L0_SetPixelIndex</a> from glcd_ucgui.o(i.LCD_L0_SetPixelIndex) referenced from lcd_api.o(.constdata)
 <LI><a href="#[87]">LCD_L0_XorPixel</a> from glcd_ucgui.o(i.LCD_L0_XorPixel) referenced from lcd_api.o(.constdata)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">StartTButtonTask</a> from freertos.o(i.StartTButtonTask) referenced from freertos.o(.constdata)
 <LI><a href="#[6c]">StartTouchTask</a> from freertos.o(i.StartTouchTask) referenced from freertos.o(.constdata)
 <LI><a href="#[6e]">StartVoltTask</a> from freertos.o(i.StartVoltTask) referenced from freertos.o(.constdata)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM6_DAC_IRQHandler</a> from stm32f4xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[99]">WIDGET_EFFECT_3D_DrawUp</a> from widget_effect_3d.o(i.WIDGET_EFFECT_3D_DrawUp) referenced from widget_effect_3d.o(.constdata)
 <LI><a href="#[67]">WM_HandlePID</a> from wmtouch.o(i.WM_HandlePID) referenced from gui_pid.o(i._PID_Load)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">_CHECKBOX_Callback</a> from checkbox.o(i._CHECKBOX_Callback) referenced from checkbox.o(i.CHECKBOX_CreateEx)
 <LI><a href="#[7b]">_CalcSizeOfChar</a> from gui_uc_encodenone.o(i._CalcSizeOfChar) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[8c]">_DrawBitmap</a> from guidev_16.o(i._DrawBitmap) referenced from guidev_16.o(.constdata)
 <LI><a href="#[8d]">_DrawHLine</a> from guidev_16.o(i._DrawHLine) referenced from guidev_16.o(.constdata)
 <LI><a href="#[8e]">_DrawVLine</a> from guidev_16.o(i._DrawVLine) referenced from guidev_16.o(.constdata)
 <LI><a href="#[61]">_Draw_N</a> from ucgui_user_graph.o(i._Draw_N) referenced from ucgui_user_graph.o(i.Draw_Graph)
 <LI><a href="#[7c]">_Encode</a> from gui_uc_encodenone.o(i._Encode) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[8f]">_FillRect</a> from guidev_16.o(i._FillRect) referenced from guidev_16.o(.constdata)
 <LI><a href="#[97]">_GUI_USAGE_BM_Delete</a> from guidev_usagebm.o(i._GUI_USAGE_BM_Delete) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[79]">_GetCharCode</a> from gui_uc_encodenone.o(i._GetCharCode) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[7a]">_GetCharSize</a> from gui_uc_encodenone.o(i._GetCharSize) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[90]">_GetPixelIndex</a> from guidev_16.o(i._GetPixelIndex) referenced from guidev_16.o(.constdata)
 <LI><a href="#[62]">_LISTBOX_Callback</a> from listbox.o(i._LISTBOX_Callback) referenced from listbox.o(i.LISTBOX_CreateEx)
 <LI><a href="#[63]">_RADIO_Callback</a> from radio.o(i._RADIO_Callback) referenced from radio.o(i.RADIO_CreateEx)
 <LI><a href="#[64]">_SCROLLBAR_Callback</a> from scrollbar.o(i._SCROLLBAR_Callback) referenced from scrollbar.o(i.SCROLLBAR_CreateEx)
 <LI><a href="#[92]">_SetPixelIndex</a> from guidev_16.o(i._SetPixelIndex) referenced from guidev_16.o(.constdata)
 <LI><a href="#[9a]">_WIDGET_EFFECT_3D_DrawDown</a> from widget_effect_3d.o(i._WIDGET_EFFECT_3D_DrawDown) referenced from widget_effect_3d.o(.constdata)
 <LI><a href="#[9c]">_WIDGET_EFFECT_3D_DrawDownRect</a> from widget_effect_3d.o(i._WIDGET_EFFECT_3D_DrawDownRect) referenced from widget_effect_3d.o(.constdata)
 <LI><a href="#[9b]">_WIDGET_EFFECT_3D_DrawUpRect</a> from widget_effect_3d.o(i._WIDGET_EFFECT_3D_DrawUpRect) referenced from widget_effect_3d.o(.constdata)
 <LI><a href="#[9d]">_WIDGET_EFFECT_3D_GetRect</a> from widget_effect_3d.o(i._WIDGET_EFFECT_3D_GetRect) referenced from widget_effect_3d.o(.constdata)
 <LI><a href="#[93]">_XorPixel</a> from guidev_16.o(i._XorPixel) referenced from guidev_16.o(.constdata)
 <LI><a href="#[5e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[66]">_cbInvalidateOne</a> from wm_bringtotop.o(i._cbInvalidateOne) referenced from wm_bringtotop.o(i._InvalidateWindowAndDescs)
 <LI><a href="#[68]">_cbPaintMemDev</a> from wm.o(i._cbPaintMemDev) referenced from wm.o(i._Paint)
 <LI><a href="#[69]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[65]">cbBackWin</a> from wm.o(i.cbBackWin) referenced from wm.o(i.WM_Init)
 <LI><a href="#[5c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6b]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[6a]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[320]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[321]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[322]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[323]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[324]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[325]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[319]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[318]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[313]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[326]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_SetItem
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocInit
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine8BPP_DDB
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine16BPP_DDB
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_CreateEx
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateEx
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W_M
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_CreateEx
</UL>

<P><STRONG><a name="[229]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVoltTask
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateHole
</UL>

<P><STRONG><a name="[327]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_AddHLine
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[329]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads7846
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Clear
</UL>

<P><STRONG><a name="[32b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1cf]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddString
</UL>

<P><STRONG><a name="[167]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreStateEx
</UL>

<P><STRONG><a name="[189]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddString
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVoltTask
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVoltTask
</UL>

<P><STRONG><a name="[225]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVoltTask
</UL>

<P><STRONG><a name="[32c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[32d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[32e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[32f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[331]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a9]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[332]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_IRQHandler &rArr; HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>BUTTON_Callback</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, button.o(i.BUTTON_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BUTTON_Callback &rArr; WIDGET_HandleActive &rArr; _UpdateChildPostions &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Delete
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.BUTTON_CreateEx)
</UL>
<P><STRONG><a name="[bb]"></a>BUTTON_Create</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, button_create.o(i.BUTTON_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BUTTON_Create &rArr; BUTTON_CreateEx &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateEx
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[bc]"></a>BUTTON_CreateEx</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, button.o(i.BUTTON_CreateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = BUTTON_CreateEx &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Create
</UL>

<P><STRONG><a name="[c2]"></a>BUTTON_SetText</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, button.o(i.BUTTON_SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = BUTTON_SetText &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>CHECKBOX_Create</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, checkbox_create.o(i.CHECKBOX_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CHECKBOX_Create &rArr; CHECKBOX_CreateEx &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_CreateEx
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[c6]"></a>CHECKBOX_CreateEx</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, checkbox.o(i.CHECKBOX_CreateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CHECKBOX_CreateEx &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_GetDefaultEffect
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_Create
</UL>

<P><STRONG><a name="[c8]"></a>CHECKBOX_GetState</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, checkbox_getstate.o(i.CHECKBOX_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CHECKBOX_GetState &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_IsChecked
</UL>

<P><STRONG><a name="[c9]"></a>CHECKBOX_IsChecked</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, checkbox_ischecked.o(i.CHECKBOX_IsChecked))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CHECKBOX_IsChecked &rArr; CHECKBOX_GetState &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[ca]"></a>CHECKBOX_SetBkColor</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, checkbox_setbkcolor.o(i.CHECKBOX_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CHECKBOX_SetBkColor &rArr; WM_SetTransState &rArr; WM_SetHasTrans &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetTransState
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[cc]"></a>CHECKBOX_SetFont</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, checkbox_setfont.o(i.CHECKBOX_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CHECKBOX_SetFont &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[cd]"></a>CHECKBOX_SetText</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, checkbox_settext.o(i.CHECKBOX_SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CHECKBOX_SetText &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[243]"></a>DIALOG_GetBkColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dialog.o(i.DIALOG_GetBkColor))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetBkColor
</UL>

<P><STRONG><a name="[43]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>DrawBitLine16BPP</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, glcd_ucgui.o(i.DrawBitLine16BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DrawBitLine16BPP &rArr; LCD_SetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>

<P><STRONG><a name="[d1]"></a>DrawBitLine1BPP</STRONG> (Thumb, 604 bytes, Stack size 32 bytes, glcd_ucgui.o(i.DrawBitLine1BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DrawBitLine1BPP &rArr; LCD_L0_XorPixel &rArr; LCD_SetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_XorPixel
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>

<P><STRONG><a name="[d4]"></a>DrawBitLine8BPP</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, glcd_ucgui.o(i.DrawBitLine8BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DrawBitLine8BPP &rArr; LCD_SetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>

<P><STRONG><a name="[d5]"></a>Draw_CH_Base</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ucgui_user_graph.o(i.Draw_CH_Base))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Draw_CH_Base &rArr; GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[dd]"></a>Draw_Graph</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ucgui_user_graph.o(i.Draw_Graph))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Draw_Graph &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisplayTime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b3]"></a>FSMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[1b1]"></a>FSMC_NORSRAM_Init</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FSMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[1b2]"></a>FSMC_NORSRAM_Timing_Init</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[e2]"></a>GL_DrawBitmap</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, gui_drawbitmap.o(i.GL_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GL_DrawBitmap &rArr; GUI_SetDrawMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
</UL>

<P><STRONG><a name="[137]"></a>GL_FillCircle</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, guicirc.o(i.GL_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GL_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
</UL>

<P><STRONG><a name="[e6]"></a>GL_SetDefault</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gui_setdefault.o(i.GL_SetDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GL_SetDefault &rArr; GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetDefault
</UL>

<P><STRONG><a name="[71]"></a>GUIMONO_DispChar</STRONG> (Thumb, 378 bytes, Stack size 80 bytes, guicharm.o(i.GUIMONO_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUIMONO_DispChar &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>GUIMONO_GetCharDistX</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guicharm.o(i.GUIMONO_GetCharDistX))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>GUIMONO_GetFontInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guicharm.o(i.GUIMONO_GetFontInfo))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>GUIMONO_IsInFont</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, guicharm.o(i.GUIMONO_IsInFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUIMONO_IsInFont
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>GUIPROP_DispChar</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, guicharp.o(i.GUIPROP_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GUIPROP_DispChar &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_FindChar
</UL>
<BR>[Address Reference Count : 3]<UL><LI> f13_1.o(.constdata)
<LI> f13_ascii.o(.constdata)
<LI> fcomic18b_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>GUIPROP_GetCharDistX</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, guicharp.o(i.GUIPROP_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUIPROP_GetCharDistX
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_FindChar
</UL>
<BR>[Address Reference Count : 3]<UL><LI> f13_1.o(.constdata)
<LI> f13_ascii.o(.constdata)
<LI> fcomic18b_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>GUIPROP_GetFontInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guicharp.o(i.GUIPROP_GetFontInfo))
<BR>[Address Reference Count : 3]<UL><LI> f13_1.o(.constdata)
<LI> f13_ascii.o(.constdata)
<LI> fcomic18b_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>GUIPROP_IsInFont</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, guicharp.o(i.GUIPROP_IsInFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUIPROP_IsInFont
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_FindChar
</UL>
<BR>[Address Reference Count : 3]<UL><LI> f13_1.o(.constdata)
<LI> f13_ascii.o(.constdata)
<LI> fcomic18b_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>GUITASK_CopyContext</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, guitask.o(i.GUITASK_CopyContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUITASK_CopyContext &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[f0]"></a>GUITASK_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, guitask.o(i.GUITASK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUITASK_Init &rArr; GUI_X_InitOS &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[f2]"></a>GUI_ALLOC_AllocInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gui_alloc_allocinit.o(i.GUI_ALLOC_AllocInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_ALLOC_AllocInit &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
</UL>

<P><STRONG><a name="[f3]"></a>GUI_ALLOC_AllocNoInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, guialloc.o(i.GUI_ALLOC_AllocNoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[f7]"></a>GUI_ALLOC_AllocZero</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_alloc_alloczero.o(i.GUI_ALLOC_AllocZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_SetItem
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[f8]"></a>GUI_ALLOC_Free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, guialloc.o(i.GUI_ALLOC_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GUI_USAGE_BM_Delete
</UL>

<P><STRONG><a name="[fa]"></a>GUI_ALLOC_FreePtr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, guialloc.o(i.GUI_ALLOC_FreePtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_ALLOC_FreePtr &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Delete
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_SetItem
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_Delete
</UL>

<P><STRONG><a name="[fb]"></a>GUI_ALLOC_GetMaxSize</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, guialloc.o(i.GUI_ALLOC_GetMaxSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_ALLOC_GetMaxSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckInit
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[fd]"></a>GUI_ALLOC_GetSize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, guialloc.o(i.GUI_ALLOC_GetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_ALLOC_GetSize
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSize
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_SetItem
</UL>

<P><STRONG><a name="[2b3]"></a>GUI_ALLOC_Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, guialloc.o(i.GUI_ALLOC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckInit
</UL>

<P><STRONG><a name="[ff]"></a>GUI_ALLOC_Realloc</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, guirealloc.o(i.GUI_ALLOC_Realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GUI_ALLOC_Realloc &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetSize
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
</UL>

<P><STRONG><a name="[b5]"></a>GUI_ALLOC_h2p</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, guialloc.o(i.GUI_ALLOC_h2p))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetTransState
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_GetState
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_CreateEx
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateEx
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsVisible
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetFont
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetBkColor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_GetValue
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetFont
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_GetSel
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetText
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetFont
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetBkColor
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateEx
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_SetItem
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateEx
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_AddValue
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RADIO_Callback
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItem
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GethItem
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_Delete
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetSel
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_InvalidateItem
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_CreateEx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddString
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ToggleMultiSel
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SelectByKey
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NotifyOwner
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAutoScroll
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetContentsSizeX
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollParas
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKey
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strcmp_hp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowDescs
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BringToTop
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveFromLinList
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateArea
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransTopSiblings
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteAllChildren
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddToLinList
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCROLLBAR_Callback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocInit
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CHECKBOX_Callback
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Index2Color
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__GetRect
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__GetIndexMask
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Color2Index
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPosition
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFlags
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateChildPostions
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetWidth
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetYSize
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetXSize
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[100]"></a>GUI_ARRAY_AddItem</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, gui_array.o(i.GUI_ARRAY_AddItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GUI_ARRAY_AddItem &rArr; GUI_ALLOC_Realloc &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocInit
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateEx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddString
</UL>

<P><STRONG><a name="[101]"></a>GUI_ARRAY_Delete</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gui_array.o(i.GUI_ARRAY_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_ARRAY_Delete &rArr; GUI_ALLOC_FreePtr &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RADIO_Callback
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FreeAttached
</UL>

<P><STRONG><a name="[1d0]"></a>GUI_ARRAY_GetNumItems</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_array.o(i.GUI_ARRAY_GetNumItems))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetFont
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetNumItems
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddString
</UL>

<P><STRONG><a name="[102]"></a>GUI_ARRAY_GethItem</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gui_array.o(i.GUI_ARRAY_GethItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_ARRAY_GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItem
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetSel
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ToggleMultiSel
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
</UL>

<P><STRONG><a name="[103]"></a>GUI_ARRAY_GetpItem</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gui_array.o(i.GUI_ARRAY_GetpItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_ARRAY_GetpItem &rArr; GUI_ARRAY_GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GethItem
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateItemSize
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetpString
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddString
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemSizeY
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemSizeX
</UL>

<P><STRONG><a name="[104]"></a>GUI_ARRAY_SetItem</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, gui_array.o(i.GUI_ARRAY_SetItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GUI_ARRAY_SetItem &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetSize
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
</UL>

<P><STRONG><a name="[105]"></a>GUI_AddDecMin</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_adddecmin.o(i.GUI_AddDecMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_AddDecMin &rArr; GUI_AddDecShift &rArr; _Check_NegLong
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Long2Len
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecSpace
</UL>

<P><STRONG><a name="[107]"></a>GUI_AddDecShift</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, gui_adddecshift.o(i.GUI_AddDecShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_AddDecShift &rArr; _Check_NegLong
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Check_NegLong
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecMin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecShift
</UL>

<P><STRONG><a name="[11d]"></a>GUI_AddSign</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_adddecshift.o(i.GUI_AddSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_AddSign
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecSpace
</UL>

<P><STRONG><a name="[109]"></a>GUI_CURSOR_SetPosition</STRONG> (Thumb, 568 bytes, Stack size 120 bytes, guicurs.o(i.GUI_CURSOR_SetPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GUI_CURSOR_SetPosition &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitmapPixelIndex
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Log2Phys
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcRect
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[10f]"></a>GUI_Clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, guicore.o(i.GUI_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_Clear &rArr; GUI_ClearRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graph_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[d7]"></a>GUI_ClearRect</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, guicore.o(i.GUI_ClearRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_ClearRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graph_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_CH_Base
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowText
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw_N
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRectEx
</UL>

<P><STRONG><a name="[113]"></a>GUI_ClearRectEx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_clearrectex.o(i.GUI_ClearRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GUI_ClearRectEx &rArr; GUI_ClearRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
</UL>

<P><STRONG><a name="[114]"></a>GUI_DRAW__Draw</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gui_draw.o(i.GUI_DRAW__Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_DRAW__Draw
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[115]"></a>GUI_Delay</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, guitime.o(i.GUI_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = GUI_Delay &rArr; GUI_Exec &rArr; GUI_Exec1 &rArr; WM_Exec &rArr; WM_Exec1 &rArr; _DrawNext &rArr; _Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[118]"></a>GUI_DispDec</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, guival.o(i.GUI_DispDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GUI_DispDec &rArr; GUI_DispDecShift &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
</UL>

<P><STRONG><a name="[dc]"></a>GUI_DispDecAt</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, guival.o(i.GUI_DispDecAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_CH_Base
</UL>

<P><STRONG><a name="[119]"></a>GUI_DispDecShift</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, guival.o(i.GUI_DispDecShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GUI_DispDecShift &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
</UL>

<P><STRONG><a name="[11c]"></a>GUI_DispDecSpace</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, guival.o(i.GUI_DispDecSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GUI_DispDecSpace &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Long2Len
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddSign
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecMin
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisplayTime
</UL>

<P><STRONG><a name="[11e]"></a>GUI_DispNextLine</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, guichar.o(i.GUI_DispNextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_DispNextLine &rArr; GUI_GetFontDistY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
</UL>

<P><STRONG><a name="[11b]"></a>GUI_DispString</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, gui_dispstring.o(i.GUI_DispString))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecSpace
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecShift
</UL>

<P><STRONG><a name="[11a]"></a>GUI_DispStringAt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_dispstringat.o(i.GUI_DispStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowText
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LabelMS
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
</UL>

<P><STRONG><a name="[125]"></a>GUI_DispStringInRect</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_dispstringinrect.o(i.GUI_DispStringInRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI_GetClientRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[126]"></a>GUI_DispStringInRectMax</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, gui_dispstringinrect.o(i.GUI_DispStringInRectMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI_GetClientRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
</UL>

<P><STRONG><a name="[12a]"></a>GUI_DrawBitmap</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, gui_drawbitmap.o(i.GUI_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; GUI_SetDrawMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[12b]"></a>GUI_DrawFocusRect</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gui_drawfocusrect.o(i.GUI_DrawFocusRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_DrawFocusRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFocusRect
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawFocusRect
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
</UL>

<P><STRONG><a name="[12e]"></a>GUI_DrawGraph</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gui_drawgraph.o(i.GUI_DrawGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_DrawGraph &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGraph
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw_N
</UL>

<P><STRONG><a name="[db]"></a>GUI_DrawHLine</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gui_drawhline.o(i.GUI_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_CH_Base
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw_N
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTriangle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WIDGET_EFFECT_3D_DrawUpRect
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WIDGET_EFFECT_3D_DrawDownRect
</UL>

<P><STRONG><a name="[130]"></a>GUI_DrawRect</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, gui2dlib.o(i.GUI_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_DrawRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graph_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WIDGET_EFFECT_3D_DrawUpRect
</UL>

<P><STRONG><a name="[132]"></a>GUI_DrawVLine</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gui_drawvline.o(i.GUI_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_DrawVLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw_N
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTriangle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WIDGET_EFFECT_3D_DrawUpRect
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WIDGET_EFFECT_3D_DrawDownRect
</UL>

<P><STRONG><a name="[116]"></a>GUI_Exec</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_exec.o(i.GUI_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = GUI_Exec &rArr; GUI_Exec1 &rArr; WM_Exec &rArr; WM_Exec1 &rArr; _DrawNext &rArr; _Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec1
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[134]"></a>GUI_Exec1</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_exec.o(i.GUI_Exec1))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = GUI_Exec1 &rArr; WM_Exec &rArr; WM_Exec1 &rArr; _DrawNext &rArr; _Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
</UL>

<P><STRONG><a name="[136]"></a>GUI_FillCircle</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, guicirc.o(i.GUI_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_FillCircle &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
</UL>

<P><STRONG><a name="[138]"></a>GUI_FillRect</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, gui_fillrect.o(i.GUI_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_FillRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
</UL>

<P><STRONG><a name="[139]"></a>GUI_FillRectEx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_fillrectex.o(i.GUI_FillRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GUI_FillRectEx &rArr; GUI_FillRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillRectEx
</UL>

<P><STRONG><a name="[10a]"></a>GUI_GetBitmapPixelIndex</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, gui_getbitmappixelindex.o(i.GUI_GetBitmapPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_GetBitmapPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPosition
</UL>

<P><STRONG><a name="[ee]"></a>GUI_GetBkColor</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_getcolor.o(i.GUI_GetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_GetBkColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[13c]"></a>GUI_GetCharDistX</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, guichar.o(i.GUI_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>

<P><STRONG><a name="[13d]"></a>GUI_GetClientRect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_getclientrect.o(i.GUI_GetClientRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_GetClientRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[ed]"></a>GUI_GetColor</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_getcolor.o(i.GUI_GetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[11f]"></a>GUI_GetFontDistY</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, guichar.o(i.GUI_GetFontDistY))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_GetFontDistY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispNextLine
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
</UL>

<P><STRONG><a name="[140]"></a>GUI_GetFontInfo</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_getfontinfo.o(i.GUI_GetFontInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_GetFontInfo &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
</UL>

<P><STRONG><a name="[141]"></a>GUI_GetFontSizeY</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_getfontsizey.o(i.GUI_GetFontSizeY))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_GetFontSizeY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetFontSizeY
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[220]"></a>GUI_GetKey</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_onkey.o(i.GUI_GetKey))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[143]"></a>GUI_GetStringDistX</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui_getstringdistx.o(i.GUI_GetStringDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[de]"></a>GUI_GetTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, guitime.o(i.GUI_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_GetTime &rArr; GUI_X_GetTime &rArr; osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Graph
</UL>

<P><STRONG><a name="[120]"></a>GUI_GetYAdjust</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, guichar.o(i.GUI_GetYAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_GetYAdjust &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[1e1]"></a>GUI_GetYDistOfFont</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_getysizeoffont.o(i.GUI_GetYDistOfFont))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
</UL>

<P><STRONG><a name="[110]"></a>GUI_GotoXY</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_goto.o(i.GUI_GotoXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_GotoXY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GotoY
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GotoX
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisplayTime
</UL>

<P><STRONG><a name="[148]"></a>GUI_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, guicore.o(i.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GUI_Init &rArr; WM_Init &rArr; WM_CreateWindow &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>GUI_Lock</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, guitask.o(i.GUI_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetTransState
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_GetState
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_CreateEx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateEx
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsVisible
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetFont
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetBkColor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_GetValue
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetFont
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_GetSel
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetText
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetFont
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetBkColor
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispNextLine
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGraph
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateEx
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontInfo
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateEx
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_AddValue
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetScrollbarV
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetScrollbarH
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetWidth
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetText
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetSel
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_InvalidateItem
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_IncSel
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_DecSel
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_CreateEx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddString
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddKey
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateArea
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec1
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCapture
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPosition
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFlags
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateChildPostions
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetWidth
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetYSize
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetXSize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
</UL>

<P><STRONG><a name="[106]"></a>GUI_Long2Len</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gui_adddecshift.o(i.GUI_Long2Len))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecSpace
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecMin
</UL>

<P><STRONG><a name="[150]"></a>GUI_MEMDEV_Clear</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, guidev_clear.o(i.GUI_MEMDEV_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_MEMDEV_Clear &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[151]"></a>GUI_MEMDEV_CopyToLCD</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, guidev.o(i.GUI_MEMDEV_CopyToLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveAt &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[152]"></a>GUI_MEMDEV_CopyToLCDAt</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, guidev.o(i.GUI_MEMDEV_CopyToLCDAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveAt &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
</UL>

<P><STRONG><a name="[157]"></a>GUI_MEMDEV_CreateEx</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, guidev.o(i.GUI_MEMDEV_CreateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[159]"></a>GUI_MEMDEV_Delete</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_MEMDEV_Delete &rArr; GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[df]"></a>GUI_MEMDEV_Draw</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, guidev_banding.o(i.GUI_MEMDEV_Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Min
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Graph
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[15e]"></a>GUI_MEMDEV_GetYSize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, guidev_getysize.o(i.GUI_MEMDEV_GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_MEMDEV_GetYSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[15f]"></a>GUI_MEMDEV_ReduceYSize</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, guidev_reduceysize.o(i.GUI_MEMDEV_ReduceYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_MEMDEV_ReduceYSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[156]"></a>GUI_MEMDEV_Select</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_MEMDEV_Select &rArr; WM_Deactivate &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[160]"></a>GUI_MEMDEV_SetOrg</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, guidev_setorg.o(i.GUI_MEMDEV_SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_MEMDEV_SetOrg &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[89]"></a>GUI_MEMDEV__Color2Index</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV__Color2Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_MEMDEV__Color2Index
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>GUI_MEMDEV__CreateFixed</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, guidev.o(i.GUI_MEMDEV__CreateFixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
</UL>

<P><STRONG><a name="[8b]"></a>GUI_MEMDEV__GetIndexMask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, guidev.o(i.GUI_MEMDEV__GetIndexMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_MEMDEV__GetIndexMask
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>GUI_MEMDEV__GetRect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV__GetRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_MEMDEV__GetRect
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>GUI_MEMDEV__Index2Color</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV__Index2Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_MEMDEV__Index2Color
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>GUI_MEMDEV__WriteToActiveAt</STRONG> (Thumb, 292 bytes, Stack size 96 bytes, guidev.o(i.GUI_MEMDEV__WriteToActiveAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GUI_MEMDEV__WriteToActiveAt &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[27f]"></a>GUI_MergeRect</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, gui_mergerect.o(i.GUI_MergeRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_MergeRect
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[266]"></a>GUI_MoveRect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gui_moverect.o(i.GUI_MoveRect))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[26a]"></a>GUI_PID_GetState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_pid.o(i.GUI_PID_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[165]"></a>GUI_PID_StoreState</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_pid.o(i.GUI_PID_StoreState))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI_PID_StoreState &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID_Load
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreStateEx
</UL>

<P><STRONG><a name="[168]"></a>GUI_PollKeyMsg</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gui_onkey.o(i.GUI_PollKeyMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GUI_PollKeyMsg &rArr; WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec1
</UL>

<P><STRONG><a name="[2b4]"></a>GUI_RectsIntersect</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gui_rectsintersect.o(i.GUI_RectsIntersect))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[16b]"></a>GUI_RestoreContext</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_savecontext.o(i.GUI_RestoreContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_RestoreContext &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
</UL>

<P><STRONG><a name="[16c]"></a>GUI_SaveContext_W_M</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_savecontext.o(i.GUI_SaveContext_W_M))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_SaveContext_W_M &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
</UL>

<P><STRONG><a name="[153]"></a>GUI_SelectLCD</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_selectlcd.o(i.GUI_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[d6]"></a>GUI_SetBkColor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_setcolor.o(i.GUI_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_SetBkColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_CH_Base
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowText
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw_N
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisplayTime
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
</UL>

<P><STRONG><a name="[da]"></a>GUI_SetColor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_setcolor.o(i.GUI_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_CH_Base
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowText
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw_N
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisplayTime
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[e3]"></a>GUI_SetDrawMode</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_setdrawmode.o(i.GUI_SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_SetDrawMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[d9]"></a>GUI_SetFont</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_setfont.o(i.GUI_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_SetFont &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graph_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_CH_Base
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowText
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LabelMS
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemSizeY
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemSizeX
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[e9]"></a>GUI_SetLineStyle</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui_setlinestyle.o(i.GUI_SetLineStyle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_SetLineStyle &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[d8]"></a>GUI_SetPenSize</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui_pen.o(i.GUI_SetPenSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_SetPenSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graph_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_CH_Base
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[e7]"></a>GUI_SetTextAlign</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_settextalign.o(i.GUI_SetTextAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_SetTextAlign &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[e8]"></a>GUI_SetTextMode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_settextmode.o(i.GUI_SetTextMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[16a]"></a>GUI_StoreKey</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_onkey.o(i.GUI_StoreKey))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ButtonReleased
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[171]"></a>GUI_TOUCH_Calibrate</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, gui_touch_driveranalog.o(i.GUI_TOUCH_Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_TOUCH_Calibrate &rArr; _Log2Phys
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Log2Phys
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
</UL>

<P><STRONG><a name="[173]"></a>GUI_TOUCH_Exec</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, gui_touch_driveranalog.o(i.GUI_TOUCH_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GUI_TOUCH_Exec &rArr; GUI_TOUCH_Measure &rArr; Read_Ads7846 &rArr; TP_GetAdXY &rArr; Read_Y &rArr; RD_AD &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Measure
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreUnstable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreUnstable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AD2Y
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AD2X
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTouchTask
</UL>

<P><STRONG><a name="[2c0]"></a>GUI_TOUCH_GetState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_touch.o(i.GUI_TOUCH_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
</UL>

<P><STRONG><a name="[2c1]"></a>GUI_TOUCH_GetxPhys</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_touch_driveranalog.o(i.GUI_TOUCH_GetxPhys))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
</UL>

<P><STRONG><a name="[2c2]"></a>GUI_TOUCH_GetyPhys</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_touch_driveranalog.o(i.GUI_TOUCH_GetyPhys))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
</UL>

<P><STRONG><a name="[174]"></a>GUI_TOUCH_Measure</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui_x_touch.o(i.GUI_TOUCH_Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GUI_TOUCH_Measure &rArr; Read_Ads7846 &rArr; TP_GetAdXY &rArr; Read_Y &rArr; RD_AD &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads7846
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[2bf]"></a>GUI_TOUCH_SetDefaultCalibration</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_touch_driveranalog.o(i.GUI_TOUCH_SetDefaultCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
</UL>

<P><STRONG><a name="[17a]"></a>GUI_TOUCH_StoreState</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_touch_storestate.o(i.GUI_TOUCH_StoreState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_TOUCH_StoreState &rArr; GUI_TOUCH_StoreStateEx &rArr; GUI_PID_StoreState &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreStateEx
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreUnstable
</UL>

<P><STRONG><a name="[17b]"></a>GUI_TOUCH_StoreStateEx</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_touch.o(i.GUI_TOUCH_StoreStateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GUI_TOUCH_StoreStateEx &rArr; GUI_PID_StoreState &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreState
</UL>

<P><STRONG><a name="[178]"></a>GUI_TOUCH_StoreUnstable</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gui_touch_storeunstable.o(i.GUI_TOUCH_StoreUnstable))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GUI_TOUCH_StoreUnstable &rArr; GUI_TOUCH_StoreState &rArr; GUI_TOUCH_StoreStateEx &rArr; GUI_PID_StoreState &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreState
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreUnstable
</UL>

<P><STRONG><a name="[187]"></a>GUI_UC__GetCharCodeInc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_uc.o(i.GUI_UC__GetCharCodeInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[124]"></a>GUI_UC__NumChars2NumBytes</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gui_uc.o(i.GUI_UC__NumChars2NumBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__NumChars2NumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[2b7]"></a>GUI_USAGE_AddRect</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, guidev_usage.o(i.GUI_USAGE_AddRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_USAGE_AddRect
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[163]"></a>GUI_USAGE_BM_Create</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[15a]"></a>GUI_USAGE_DecUseCnt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, guidev_usage.o(i.GUI_USAGE_DecUseCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[c1]"></a>GUI_Unlock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, guitask.o(i.GUI_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetTransState
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_GetState
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_CreateEx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateEx
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsVisible
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetFont
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetBkColor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_GetValue
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetFont
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_GetSel
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetText
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetFont
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetBkColor
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispNextLine
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGraph
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateEx
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontInfo
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateEx
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_AddValue
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetScrollbarV
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetScrollbarH
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetWidth
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetText
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetSel
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_InvalidateItem
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_IncSel
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_DecSel
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_CreateEx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddString
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddKey
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateArea
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec1
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCapture
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPosition
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFlags
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateChildPostions
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetWidth
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetYSize
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetXSize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
</UL>

<P><STRONG><a name="[117]"></a>GUI_X_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x_ucos.o(i.GUI_X_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI_X_Delay &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[14e]"></a>GUI_X_GetTaskId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x_ucos.o(i.GUI_X_GetTaskId))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
</UL>

<P><STRONG><a name="[145]"></a>GUI_X_GetTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x_ucos.o(i.GUI_X_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_X_GetTime &rArr; osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>

<P><STRONG><a name="[149]"></a>GUI_X_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_x_ucos.o(i.GUI_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_X_Init &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[f1]"></a>GUI_X_InitOS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_x_ucos.o(i.GUI_X_InitOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_X_InitOS &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
</UL>

<P><STRONG><a name="[14d]"></a>GUI_X_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_x_ucos.o(i.GUI_X_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[17d]"></a>GUI_X_Unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_x_ucos.o(i.GUI_X_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
</UL>

<P><STRONG><a name="[123]"></a>GUI__DispLine</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, guicharline.o(i.GUI__DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; _FindNext_IVR &rArr; _Findx0 &rArr;  _Findx0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[129]"></a>GUI__DispStringInRect</STRONG> (Thumb, 374 bytes, Stack size 80 bytes, gui_dispstringinrect.o(i.GUI__DispStringInRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GUI__DispStringInRect &rArr; GUI_GetClientRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__HandleEOLine
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
</UL>

<P><STRONG><a name="[2ad]"></a>GUI__DivideRound</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui__divideround.o(i.GUI__DivideRound))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__DivideRound
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[142]"></a>GUI__GetFontSizeY</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui__getfontsizey.o(i.GUI__GetFontSizeY))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
</UL>

<P><STRONG><a name="[122]"></a>GUI__GetLineDistX</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, guicharline.o(i.GUI__GetLineDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[121]"></a>GUI__GetLineNumChars</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, guicharline.o(i.GUI__GetLineNumChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[186]"></a>GUI__HandleEOLine</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui__handleeoline.o(i.GUI__HandleEOLine))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[275]"></a>GUI__IntersectRect</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gui__intersectrect.o(i.GUI__IntersectRect))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[128]"></a>GUI__IntersectRects</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, gui__intersectrects.o(i.GUI__IntersectRects))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>

<P><STRONG><a name="[12c]"></a>GUI__ReduceRect</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gui__reducerect.o(i.GUI__ReduceRect))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WIDGET_EFFECT_3D_GetRect
</UL>

<P><STRONG><a name="[c3]"></a>GUI__SetText</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gui__settext.o(i.GUI__SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI__SetText &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strlen
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strcmp_hp
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetText
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
</UL>

<P><STRONG><a name="[f5]"></a>GUI__memset</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gui__memset.o(i.GUI__memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI__memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocInit
</UL>

<P><STRONG><a name="[2c3]"></a>GUI__memset16</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gui__memset16.o(i.GUI__memset16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI__memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>

<P><STRONG><a name="[18a]"></a>GUI__strcmp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gui__strcmp.o(i.GUI__strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strcmp_hp
</UL>

<P><STRONG><a name="[188]"></a>GUI__strcmp_hp</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui__strcmp.o(i.GUI__strcmp_hp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI__strcmp_hp
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
</UL>

<P><STRONG><a name="[144]"></a>GUI__strlen</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui__strlen.o(i.GUI__strlen))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
</UL>

<P><STRONG><a name="[18b]"></a>Graph_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ucgui_user_graph.o(i.Graph_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Graph_Init &rArr; _ShowText &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowText
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LabelMS
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVoltTask
</UL>

<P><STRONG><a name="[18f]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[18e]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[191]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[228]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVoltTask
</UL>

<P><STRONG><a name="[b4]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>HAL_ADC_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[190]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[193]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[19a]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVoltTask
</UL>

<P><STRONG><a name="[227]"></a>HAL_ADC_Start</STRONG> (Thumb, 170 bytes, Stack size 12 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVoltTask
</UL>

<P><STRONG><a name="[ce]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>HAL_DMA_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[19e]"></a>HAL_Delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[195]"></a>HAL_GPIO_Init</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FSMC_MspInit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[20e]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads7846
</UL>

<P><STRONG><a name="[224]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X
</UL>

<P><STRONG><a name="[19b]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[22b]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_MspInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[199]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[198]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[22e]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[231]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[230]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 730 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_SPI_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RD_AD
</UL>

<P><STRONG><a name="[1af]"></a>HAL_SRAM_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SRAM_Init &rArr; HAL_SRAM_MspInit &rArr; HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FSMC_Init
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsmc.o(i.HAL_SRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SRAM_MspInit &rArr; HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FSMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[22f]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_UART_MspInit</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1be]"></a>LCD_Color2Index</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LCD_Color2Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Log2Phys
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[1c5]"></a>LCD_Color2Index_M565</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcdpm565.o(i.LCD_Color2Index_M565))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Color2Index_M565
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Color2Index
</UL>

<P><STRONG><a name="[e5]"></a>LCD_DrawBitmap</STRONG> (Thumb, 566 bytes, Stack size 80 bytes, lcd.o(i.LCD_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
</UL>

<P><STRONG><a name="[6f]"></a>LCD_DrawHLine</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lcd.o(i.LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicore.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>LCD_DrawLine</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, glcd.o(i.LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_DrawLine &rArr; LCD_SetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawVLine
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawHLine
</UL>

<P><STRONG><a name="[70]"></a>LCD_DrawPixel</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lcd.o(i.LCD_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFocusRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicore.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>LCD_DrawVLine</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lcd_drawvline.o(i.LCD_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGraph
</UL>

<P><STRONG><a name="[eb]"></a>LCD_FillRect</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lcd.o(i.LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
</UL>

<P><STRONG><a name="[13a]"></a>LCD_GetBkColorIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getcolorindex.o(i.LCD_GetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
</UL>

<P><STRONG><a name="[13f]"></a>LCD_GetColorIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getcolorindex.o(i.LCD_GetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
</UL>

<P><STRONG><a name="[1c6]"></a>LCD_GetIndexMask_M565</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcdpm565.o(i.LCD_GetIndexMask_M565))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_GetIndexMask
</UL>

<P><STRONG><a name="[164]"></a>LCD_GetNumColors</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcdinfo0.o(i.LCD_GetNumColors))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[1bb]"></a>LCD_GetPoint</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, glcd.o(i.LCD_GetPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_XorPixel
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_GetPixelIndex
</UL>

<P><STRONG><a name="[15b]"></a>LCD_GetXSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcdinfo0.o(i.LCD_GetXSize))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[15d]"></a>LCD_GetYSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcdinfo0.o(i.LCD_GetYSize))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[e4]"></a>LCD_GetpPalConvTable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcdcolor.o(i.LCD_GetpPalConvTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_GetpPalConvTable &rArr; LCD_GetpPalConvTableUncached &rArr; LCD_Color2Index
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
</UL>

<P><STRONG><a name="[1bd]"></a>LCD_GetpPalConvTableUncached</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lcdcolor.o(i.LCD_GetpPalConvTableUncached))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_GetpPalConvTableUncached &rArr; LCD_Color2Index
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTable
</UL>

<P><STRONG><a name="[13b]"></a>LCD_Index2Color</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LCD_Index2Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Index2Color
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
</UL>

<P><STRONG><a name="[1c7]"></a>LCD_Index2Color_M565</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lcdpm565_index2color.o(i.LCD_Index2Color_M565))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Index2Color_M565
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Index2Color
</UL>

<P><STRONG><a name="[14b]"></a>LCD_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_Init &rArr; LCD_L0_Init &rArr; LCD_Initializtion
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_On
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[1c0]"></a>LCD_InitLUT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcdcolor.o(i.LCD_InitLUT))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1c2]"></a>LCD_Initializtion</STRONG> (Thumb, 5670 bytes, Stack size 40 bytes, glcd.o(i.LCD_Initializtion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_Initializtion
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Init
</UL>

<P><STRONG><a name="[7d]"></a>LCD_L0_Color2Index</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lcd_l0_generic.o(i.LCD_L0_Color2Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_L0_Color2Index &rArr; LCD_Color2Index_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index_M565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_api.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>LCD_L0_DrawBitmap</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, glcd_ucgui.o(i.LCD_L0_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_L0_DrawBitmap &rArr; DrawBitLine1BPP &rArr; LCD_L0_XorPixel &rArr; LCD_SetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitLine8BPP
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitLine1BPP
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitLine16BPP
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitLine4BPP
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitLine2BPP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_api.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>LCD_L0_DrawHLine</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, glcd_ucgui.o(i.LCD_L0_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_L0_DrawHLine &rArr; LCD_DrawLine &rArr; LCD_SetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_api.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>LCD_L0_DrawVLine</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, glcd_ucgui.o(i.LCD_L0_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_L0_DrawVLine &rArr; LCD_DrawLine &rArr; LCD_SetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_api.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>LCD_L0_FillRect</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, glcd_ucgui.o(i.LCD_L0_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_L0_FillRect &rArr; LCD_L0_DrawHLine &rArr; LCD_DrawLine &rArr; LCD_SetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_api.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>LCD_L0_GetIndexMask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lcd_l0_generic.o(i.LCD_L0_GetIndexMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_L0_GetIndexMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetIndexMask_M565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_api.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>LCD_L0_GetPixelIndex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_ucgui.o(i.LCD_L0_GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_L0_GetPixelIndex &rArr; LCD_GetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_api.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>LCD_L0_GetRect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_l0_generic.o(i.LCD_L0_GetRect))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_api.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>LCD_L0_Index2Color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd_l0_generic.o(i.LCD_L0_Index2Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_L0_Index2Color &rArr; LCD_Index2Color_M565
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color_M565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_api.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>LCD_L0_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, glcd_ucgui.o(i.LCD_L0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_L0_Init &rArr; LCD_Initializtion
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initializtion
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1c1]"></a>LCD_L0_On</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, glcd_ucgui.o(i.LCD_L0_On))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[88]"></a>LCD_L0_SetLUTEntry</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, glcd_ucgui.o(i.LCD_L0_SetLUTEntry))
<BR>[Address Reference Count : 1]<UL><LI> lcd_api.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>LCD_L0_SetPixelIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, glcd_ucgui.o(i.LCD_L0_SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_L0_SetPixelIndex &rArr; LCD_SetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_api.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>LCD_L0_XorPixel</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, glcd_ucgui.o(i.LCD_L0_XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_L0_XorPixel &rArr; LCD_SetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitLine1BPP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_api.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>LCD_SelectLCD</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_selectlcd.o(i.LCD_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SelectLCD &rArr; LCD_SetClipRectMax
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[16f]"></a>LCD_SetBkColor</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd.o(i.LCD_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetBkColor &rArr; LCD_Color2Index
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[1c8]"></a>LCD_SetBkColorIndex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(i.LCD_SetBkColorIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetBkColorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[1ca]"></a>LCD_SetClipRectEx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd_setcliprectex.o(i.LCD_SetClipRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
</UL>

<P><STRONG><a name="[162]"></a>LCD_SetClipRectMax</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LCD_SetClipRectMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>

<P><STRONG><a name="[170]"></a>LCD_SetColor</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd.o(i.LCD_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetColor &rArr; LCD_Color2Index
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WIDGET_EFFECT_3D_DrawUpRect
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WIDGET_EFFECT_3D_DrawDownRect
</UL>

<P><STRONG><a name="[1cb]"></a>LCD_SetColorIndex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(i.LCD_SetColorIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetColorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[ea]"></a>LCD_SetDrawMode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd.o(i.LCD_SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
</UL>

<P><STRONG><a name="[d0]"></a>LCD_SetPoint</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, glcd.o(i.LCD_SetPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_XorPixel
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetPixelIndex
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitLine8BPP
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitLine1BPP
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitLine16BPP
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitLine4BPP
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitLine2BPP
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[16e]"></a>LCD_UpdateColorIndices</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_updatecolorindices.o(i.LCD_UpdateColorIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_UpdateColorIndices &rArr; LCD_Color2Index
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[1c3]"></a>LCD_WriteReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, glcd.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initializtion
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[1cc]"></a>LISTBOX_AddKey</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, listbox.o(i.LISTBOX_AddKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LISTBOX_AddKey &rArr; _AddKey &rArr; LISTBOX_IncSel &rArr; _MoveSel &rArr; LISTBOX_SetSel &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKey
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
</UL>

<P><STRONG><a name="[1ce]"></a>LISTBOX_AddString</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, listbox.o(i.LISTBOX_AddString))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = LISTBOX_AddString &rArr; LISTBOX_UpdateScrollers &rArr; _CalcScrollParas &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItem
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateItemSize
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateItem
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_UpdateScrollers
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetText
</UL>

<P><STRONG><a name="[1d4]"></a>LISTBOX_Create</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, listbox_create.o(i.LISTBOX_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = LISTBOX_Create &rArr; LISTBOX_CreateEx &rArr; LISTBOX_SetText &rArr; LISTBOX_AddString &rArr; LISTBOX_UpdateScrollers &rArr; _CalcScrollParas &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_CreateEx
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[1d5]"></a>LISTBOX_CreateEx</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, listbox.o(i.LISTBOX_CreateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = LISTBOX_CreateEx &rArr; LISTBOX_SetText &rArr; LISTBOX_AddString &rArr; LISTBOX_UpdateScrollers &rArr; _CalcScrollParas &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_UpdateScrollers
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetText
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_Create
</UL>

<P><STRONG><a name="[1d7]"></a>LISTBOX_DecSel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, listbox.o(i.LISTBOX_DecSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = LISTBOX_DecSel &rArr; _MoveSel &rArr; LISTBOX_SetSel &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKey
</UL>

<P><STRONG><a name="[1d9]"></a>LISTBOX_GetSel</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, listbox.o(i.LISTBOX_GetSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LISTBOX_GetSel &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
</UL>

<P><STRONG><a name="[1da]"></a>LISTBOX_IncSel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, listbox.o(i.LISTBOX_IncSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = LISTBOX_IncSel &rArr; _MoveSel &rArr; LISTBOX_SetSel &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKey
</UL>

<P><STRONG><a name="[1db]"></a>LISTBOX_InvalidateItem</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, listbox.o(i.LISTBOX_InvalidateItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = LISTBOX_InvalidateItem &rArr; LISTBOX_UpdateScrollers &rArr; _CalcScrollParas &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateItemSize
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateItemAndBelow
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateInsideArea
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetNumItems
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_UpdateScrollers
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetFont
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetText
</UL>

<P><STRONG><a name="[1df]"></a>LISTBOX_OwnerDraw</STRONG> (Thumb, 380 bytes, Stack size 64 bytes, listbox.o(i.LISTBOX_OwnerDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRect
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYDistOfFont
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GethItem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetpString
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CallOwnerDraw
</UL>

<P><STRONG><a name="[1e3]"></a>LISTBOX_SetFont</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, listbox_font.o(i.LISTBOX_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = LISTBOX_SetFont &rArr; LISTBOX_InvalidateItem &rArr; LISTBOX_UpdateScrollers &rArr; _CalcScrollParas &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_InvalidateItem
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[1e4]"></a>LISTBOX_SetSel</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, listbox.o(i.LISTBOX_SetSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = LISTBOX_SetSel &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GethItem
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateItem
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateInsideArea
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetNumItems
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateScrollPos
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NotifyOwner
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SelectByKey
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
</UL>

<P><STRONG><a name="[1d6]"></a>LISTBOX_SetText</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, listbox.o(i.LISTBOX_SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = LISTBOX_SetText &rArr; LISTBOX_AddString &rArr; LISTBOX_UpdateScrollers &rArr; _CalcScrollParas &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_InvalidateItem
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddString
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_CreateEx
</UL>

<P><STRONG><a name="[1d2]"></a>LISTBOX_UpdateScrollers</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, listbox.o(i.LISTBOX_UpdateScrollers))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = LISTBOX_UpdateScrollers &rArr; _CalcScrollParas &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAutoScroll
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollParas
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_InvalidateItem
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_CreateEx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddString
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKey
</UL>

<P><STRONG><a name="[1dc]"></a>LISTBOX__GetNumItems</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, listbox.o(i.LISTBOX__GetNumItems))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LISTBOX__GetNumItems
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetSel
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_InvalidateItem
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SelectByKey
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAutoScroll
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsPartiallyVis
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNumVisItems
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemPosY
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemFromPos
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetContentsSizeX
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollParas
</UL>

<P><STRONG><a name="[1e0]"></a>LISTBOX__GetpString</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, listbox.o(i.LISTBOX__GetpString))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LISTBOX__GetpString &rArr; GUI_ARRAY_GetpItem &rArr; GUI_ARRAY_GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SelectByKey
</UL>

<P><STRONG><a name="[1dd]"></a>LISTBOX__InvalidateInsideArea</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, listbox.o(i.LISTBOX__InvalidateInsideArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LISTBOX__InvalidateInsideArea &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetSel
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_InvalidateItem
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKey
</UL>

<P><STRONG><a name="[1d3]"></a>LISTBOX__InvalidateItem</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, listbox.o(i.LISTBOX__InvalidateItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = LISTBOX__InvalidateItem &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemSizeY
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemPosY
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetSel
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddString
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ToggleMultiSel
</UL>

<P><STRONG><a name="[1de]"></a>LISTBOX__InvalidateItemAndBelow</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, listbox.o(i.LISTBOX__InvalidateItemAndBelow))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = LISTBOX__InvalidateItemAndBelow &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemPosY
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_InvalidateItem
</UL>

<P><STRONG><a name="[1d1]"></a>LISTBOX__InvalidateItemSize</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, listbox.o(i.LISTBOX__InvalidateItemSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LISTBOX__InvalidateItemSize &rArr; GUI_ARRAY_GetpItem &rArr; GUI_ARRAY_GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_InvalidateItem
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddString
</UL>

<P><STRONG><a name="[1ed]"></a>LISTBOX__SetScrollbarWidth</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, listbox.o(i.LISTBOX__SetScrollbarWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LISTBOX__SetScrollbarWidth &rArr; SCROLLBAR_SetWidth &rArr; WIDGET_SetWidth &rArr; WM_SetYSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetWidth
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_GetDefaultWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAutoScroll
</UL>

<P><STRONG><a name="[1f1]"></a>MX_ADC1_Init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f3]"></a>MX_ADC2_Init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, adc.o(i.MX_ADC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f4]"></a>MX_DMA_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f5]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f7]"></a>MX_FSMC_Init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, fsmc.o(i.MX_FSMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_FSMC_Init &rArr; HAL_SRAM_Init &rArr; HAL_SRAM_MspInit &rArr; HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f8]"></a>MX_GPIO_Init</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fa]"></a>MX_SPI2_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spi.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fb]"></a>MX_TIM6_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tim.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fd]"></a>MX_UART4_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22a]"></a>Measure_Mean</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, measure.o(i.Measure_Mean))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Measure_Mean
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVoltTask
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1fe]"></a>RADIO_AddValue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, radio.o(i.RADIO_AddValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RADIO_AddValue &rArr; RADIO_SetValue &rArr; RADIO__SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Inc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Dec
</UL>

<P><STRONG><a name="[200]"></a>RADIO_Create</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, radio_create.o(i.RADIO_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = RADIO_Create &rArr; RADIO_CreateEx &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateEx
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[201]"></a>RADIO_CreateEx</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, radio.o(i.RADIO_CreateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = RADIO_CreateEx &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetBkColor
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Create
</UL>

<P><STRONG><a name="[203]"></a>RADIO_Dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, radio.o(i.RADIO_Dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RADIO_Dec &rArr; RADIO_AddValue &rArr; RADIO_SetValue &rArr; RADIO__SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_AddValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnKey
</UL>

<P><STRONG><a name="[204]"></a>RADIO_GetValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, radio.o(i.RADIO_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RADIO_GetValue &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[205]"></a>RADIO_Inc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, radio.o(i.RADIO_Inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RADIO_Inc &rArr; RADIO_AddValue &rArr; RADIO_SetValue &rArr; RADIO__SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_AddValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnKey
</UL>

<P><STRONG><a name="[206]"></a>RADIO_SetBkColor</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, radio_setbkcolor.o(i.RADIO_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RADIO_SetBkColor &rArr; WM_SetTransState &rArr; WM_SetHasTrans &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetTransState
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[207]"></a>RADIO_SetFont</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, radio_setfont.o(i.RADIO_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RADIO_SetFont &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[208]"></a>RADIO_SetText</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, radio_settext.o(i.RADIO_SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RADIO_SetText &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strlen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_SetItem
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[1ff]"></a>RADIO_SetValue</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, radio.o(i.RADIO_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = RADIO_SetValue &rArr; RADIO__SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_AddValue
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[209]"></a>RADIO__SetValue</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, radio.o(i.RADIO__SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RADIO__SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
</UL>

<P><STRONG><a name="[179]"></a>Read_Ads7846</STRONG> (Thumb, 294 bytes, Stack size 104 bytes, touchpanel.o(i.Read_Ads7846))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Read_Ads7846 &rArr; TP_GetAdXY &rArr; Read_Y &rArr; RD_AD &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetAdXY
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Measure
</UL>

<P><STRONG><a name="[20f]"></a>Read_X</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, touchpanel.o(i.Read_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Read_X &rArr; RD_AD &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RD_AD
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetAdXY
</UL>

<P><STRONG><a name="[211]"></a>Read_Y</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, touchpanel.o(i.Read_Y))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Read_Y &rArr; RD_AD &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WR_CMD
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RD_AD
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetAdXY
</UL>

<P><STRONG><a name="[212]"></a>SCROLLBAR_AddValue</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scrollbar.o(i.SCROLLBAR_AddValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SCROLLBAR_AddValue &rArr; SCROLLBAR_SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Inc
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Dec
</UL>

<P><STRONG><a name="[214]"></a>SCROLLBAR_CreateAttached</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, scrollbar_create.o(i.SCROLLBAR_CreateAttached))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SCROLLBAR_CreateAttached &rArr; SCROLLBAR_CreateEx &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateEx
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScrollbar
</UL>

<P><STRONG><a name="[215]"></a>SCROLLBAR_CreateEx</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, scrollbar.o(i.SCROLLBAR_CreateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SCROLLBAR_CreateEx &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectEx
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__InvalidatePartner
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateAttached
</UL>

<P><STRONG><a name="[218]"></a>SCROLLBAR_Dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scrollbar.o(i.SCROLLBAR_Dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SCROLLBAR_Dec &rArr; SCROLLBAR_AddValue &rArr; SCROLLBAR_SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnKey
</UL>

<P><STRONG><a name="[1ee]"></a>SCROLLBAR_GetDefaultWidth</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scrollbar_defaults.o(i.SCROLLBAR_GetDefaultWidth))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__SetScrollbarWidth
</UL>

<P><STRONG><a name="[219]"></a>SCROLLBAR_Inc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, scrollbar.o(i.SCROLLBAR_Inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SCROLLBAR_Inc &rArr; SCROLLBAR_AddValue &rArr; SCROLLBAR_SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnKey
</UL>

<P><STRONG><a name="[213]"></a>SCROLLBAR_SetValue</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, scrollbar.o(i.SCROLLBAR_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SCROLLBAR_SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[1f0]"></a>SCROLLBAR_SetWidth</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, scrollbar_setwidth.o(i.SCROLLBAR_SetWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SCROLLBAR_SetWidth &rArr; WIDGET_SetWidth &rArr; WM_SetYSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__InvalidatePartner
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__SetScrollbarWidth
</UL>

<P><STRONG><a name="[217]"></a>SCROLLBAR__InvalidatePartner</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, scrollbar.o(i.SCROLLBAR__InvalidatePartner))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollPartner
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateEx
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetWidth
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCROLLBAR_Callback
</UL>

<P><STRONG><a name="[6d]"></a>StartTButtonTask</STRONG> (Thumb, 1274 bytes, Stack size 144 bytes, freertos.o(i.StartTButtonTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = StartTButtonTask &rArr; _ExecCalibration &rArr; GUI_Delay &rArr; GUI_Exec &rArr; GUI_Exec1 &rArr; WM_Exec &rArr; WM_Exec1 &rArr; _DrawNext &rArr; _Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsVisible
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateAttached
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetFont
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetBkColor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_GetValue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Create
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetFont
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_GetSel
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_Create
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetKey
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Graph
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_CH_Base
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetText
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetFont
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetBkColor
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_IsChecked
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_Create
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Create
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>StartTouchTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos.o(i.StartTouchTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = StartTouchTask &rArr;  StartTouchTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTouchTask
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTouchTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>StartVoltTask</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, freertos.o(i.StartVoltTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = StartVoltTask &rArr; Graph_Init &rArr; _ShowText &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_Mean
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graph_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22d]"></a>SystemClock_Config</STRONG> (Thumb, 148 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_DAC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b6]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[20d]"></a>TP_GetAdXY</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, touchpanel.o(i.TP_GetAdXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TP_GetAdXY &rArr; Read_Y &rArr; RD_AD &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads7846
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[232]"></a>WIDGET_AndState</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, widget.o(i.WIDGET_AndState))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = WIDGET_AndState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ButtonReleased
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScrollbarReleased
</UL>

<P><STRONG><a name="[99]"></a>WIDGET_EFFECT_3D_DrawUp</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, widget_effect_3d.o(i.WIDGET_EFFECT_3D_DrawUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = WIDGET_EFFECT_3D_DrawUp &rArr; _WIDGET_EFFECT_3D_DrawUpRect &rArr; GUI_DrawRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WIDGET_EFFECT_3D_DrawUpRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_3d.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>WIDGET_GetDefaultEffect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, widget.o(i.WIDGET_GetDefaultEffect))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_CreateEx
</UL>

<P><STRONG><a name="[b6]"></a>WIDGET_HandleActive</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, widget.o(i.WIDGET_HandleActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = WIDGET_HandleActive &rArr; _UpdateChildPostions &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateChildPostions
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RADIO_Callback
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCROLLBAR_Callback
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CHECKBOX_Callback
</UL>

<P><STRONG><a name="[238]"></a>WIDGET_OrState</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, widget.o(i.WIDGET_OrState))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = WIDGET_OrState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ButtonPressed
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScrollbarPressed
</UL>

<P><STRONG><a name="[236]"></a>WIDGET_SetState</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, widget.o(i.WIDGET_SetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = WIDGET_SetState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
</UL>

<P><STRONG><a name="[21a]"></a>WIDGET_SetWidth</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, widget_setwidth.o(i.WIDGET_SetWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = WIDGET_SetWidth &rArr; WM_SetYSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetYSize
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetWidth
</UL>

<P><STRONG><a name="[23b]"></a>WIDGET__DrawFocusRect</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, widget.o(i.WIDGET__DrawFocusRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = WIDGET__DrawFocusRect &rArr; GUI_DrawFocusRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__RotateRect90
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[23d]"></a>WIDGET__EFFECT_DrawDown</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, widget.o(i.WIDGET__EFFECT_DrawDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WIDGET__EFFECT_DrawDown &rArr; WIDGET__EFFECT_DrawDownRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDownRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
</UL>

<P><STRONG><a name="[23e]"></a>WIDGET__EFFECT_DrawDownRect</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, widget.o(i.WIDGET__EFFECT_DrawDownRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WIDGET__EFFECT_DrawDownRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__RotateRect90
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EffectRequiresRedraw
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDown
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[240]"></a>WIDGET__EFFECT_DrawUpRect</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, widget.o(i.WIDGET__EFFECT_DrawUpRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WIDGET__EFFECT_DrawUpRect &rArr; _EffectRequiresRedraw &rArr; WM__Client2Screen
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__RotateRect90
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EffectRequiresRedraw
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[241]"></a>WIDGET__FillRectEx</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, widget.o(i.WIDGET__FillRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = WIDGET__FillRectEx &rArr; GUI_FillRectEx &rArr; GUI_FillRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__RotateRect90
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[242]"></a>WIDGET__GetBkColor</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, widget.o(i.WIDGET__GetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WIDGET__GetBkColor &rArr; WM_GetBkColor &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetBkColor
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIALOG_GetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[244]"></a>WIDGET__GetClientRect</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, widget.o(i.WIDGET__GetClientRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WIDGET__GetClientRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[237]"></a>WIDGET__GetInsideRect</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, widget.o(i.WIDGET__GetInsideRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIDGET__GetInsideRect
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
</UL>

<P><STRONG><a name="[2c8]"></a>WIDGET__GetXSize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, widget.o(i.WIDGET__GetXSize))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetArrowSize
</UL>

<P><STRONG><a name="[2c9]"></a>WIDGET__GetYSize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, widget.o(i.WIDGET__GetYSize))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetArrowSize
</UL>

<P><STRONG><a name="[bf]"></a>WIDGET__Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, widget.o(i.WIDGET__Init))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_CreateEx
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateEx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateEx
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateEx
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_CreateEx
</UL>

<P><STRONG><a name="[23c]"></a>WIDGET__RotateRect90</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, widget.o(i.WIDGET__RotateRect90))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WIDGET__RotateRect90
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawFocusRect
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDownRect
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillRectEx
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawUpRect
</UL>

<P><STRONG><a name="[246]"></a>WIDGET__SetScrollState</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, widget.o(i.WIDGET__SetScrollState))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = WIDGET__SetScrollState &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetScrollState
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateScrollPos
</UL>

<P><STRONG><a name="[154]"></a>WM_Activate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm.o(i.WM_Activate))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[248]"></a>WM_BringToBottom</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wm_bringtobottom.o(i.WM_BringToBottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WM_BringToBottom &rArr; WM__GetPrevSibling &rArr; WM__GetFirstSibling &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateArea
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[235]"></a>WM_BringToTop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_bringtotop.o(i.WM_BringToTop))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = WM_BringToTop &rArr; _BringToTop &rArr; _InvalidateWindowAndDescs &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BringToTop
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
</UL>

<P><STRONG><a name="[288]"></a>WM_CheckScrollBounds</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_checkscrollpos.o(i.WM_CheckScrollBounds))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetScrollValue
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateScrollPos
</UL>

<P><STRONG><a name="[24c]"></a>WM_ClrHasTrans</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wm_settrans.o(i.WM_ClrHasTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = WM_ClrHasTrans &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetTransState
</UL>

<P><STRONG><a name="[24d]"></a>WM_CreateWindow</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, wm.o(i.WM_CreateWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = WM_CreateWindow &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
</UL>

<P><STRONG><a name="[be]"></a>WM_CreateWindowAsChild</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, wm.o(i.WM_CreateWindowAsChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddToLinList
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_CreateEx
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateEx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateEx
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateEx
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_CreateEx
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindow
</UL>

<P><STRONG><a name="[161]"></a>WM_Deactivate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm.o(i.WM_Deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WM_Deactivate &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
</UL>

<P><STRONG><a name="[ba]"></a>WM_DefaultProc</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, wm.o(i.WM_DefaultProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RADIO_Callback
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCROLLBAR_Callback
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CHECKBOX_Callback
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>

<P><STRONG><a name="[253]"></a>WM_DeleteWindow</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, wm.o(i.WM_DeleteWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = WM_DeleteWindow &rArr; WM_NotifyParent &rArr; WM_SendToParent &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveFromLinList
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteAllChildren
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckCriticalHandles
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetNextDrawWin
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteAllChildren
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScrollbar
</UL>

<P><STRONG><a name="[135]"></a>WM_Exec</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm.o(i.WM_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = WM_Exec &rArr; WM_Exec1 &rArr; _DrawNext &rArr; _Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec1
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec1
</UL>

<P><STRONG><a name="[25a]"></a>WM_Exec1</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wm.o(i.WM_Exec1))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = WM_Exec1 &rArr; _DrawNext &rArr; _Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[25c]"></a>WM_ForEachDesc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_foreachdesc.o(i.WM_ForEachDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_ForEachDesc &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InvalidateWindowAndDescs
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
</UL>

<P><STRONG><a name="[202]"></a>WM_GetBkColor</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wm_getbkcolor.o(i.WM_GetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WM_GetBkColor &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateEx
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetBkColor
</UL>

<P><STRONG><a name="[13e]"></a>WM_GetClientRect</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wm_getclientrect.o(i.WM_GetClientRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetClientRect
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDownRect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_EFFECT_3D_DrawUp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WIDGET_EFFECT_3D_GetRect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WIDGET_EFFECT_3D_DrawDown
</UL>

<P><STRONG><a name="[25f]"></a>WM_GetClientRectEx</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm_getclientrect.o(i.WM_GetClientRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>

<P><STRONG><a name="[21f]"></a>WM_GetDesktopWindow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_getdesktopwindow.o(i.WM_GetDesktopWindow))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>

<P><STRONG><a name="[1ef]"></a>WM_GetDialogItem</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_getdialogitem.o(i.WM_GetDialogItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarV
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarH
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__SetScrollState
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__SetScrollbarWidth
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollPartner
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScrollbar
</UL>

<P><STRONG><a name="[261]"></a>WM_GetFirstChild</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_getfirstchild.o(i.WM_GetFirstChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WM_GetFirstChild &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowDescs
</UL>

<P><STRONG><a name="[262]"></a>WM_GetFlags</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_getflags.o(i.WM_GetFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_GetFlags &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
</UL>

<P><STRONG><a name="[263]"></a>WM_GetHasTrans</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_settrans.o(i.WM_GetHasTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_GetHasTrans &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[264]"></a>WM_GetId</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, wm_getid.o(i.WM_GetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WM_GetId &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollPartner
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>

<P><STRONG><a name="[1e2]"></a>WM_GetInsideRect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_getinsiderect.o(i.WM_GetInsideRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = WM_GetInsideRect &rArr; WM_GetInsideRectEx &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
</UL>

<P><STRONG><a name="[216]"></a>WM_GetInsideRectEx</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, wm_getinsiderect.o(i.WM_GetInsideRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WM_GetInsideRectEx &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateEx
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRect
</UL>

<P><STRONG><a name="[1e9]"></a>WM_GetInsideRectExScrollbar</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, wm_getinsiderectexscrollbar.o(i.WM_GetInsideRectExScrollbar))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectEx
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateItemAndBelow
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateItem
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateInsideArea
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAutoScroll
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetYSize
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemFromPos
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollParas
</UL>

<P><STRONG><a name="[21c]"></a>WM_GetParent</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_getparent.o(i.WM_GetParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NotifyOwner
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollPartner
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__InvalidatePartner
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetBkColor
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendPIDMessage
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
</UL>

<P><STRONG><a name="[21b]"></a>WM_GetScrollPartner</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_getscrollpartner.o(i.WM_GetScrollPartner))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__InvalidatePartner
</UL>

<P><STRONG><a name="[267]"></a>WM_GetScrollState</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, wm_getscrollstate.o(i.WM_GetScrollState))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WM_GetScrollState &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
</UL>

<P><STRONG><a name="[268]"></a>WM_GetScrollbarH</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_getscrollbar.o(i.WM_GetScrollbarH))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = WM_GetScrollbarH &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[269]"></a>WM_GetScrollbarV</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_getscrollbar.o(i.WM_GetScrollbarV))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = WM_GetScrollbarV &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[265]"></a>WM_GetWindowRectEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_getwindowrect.o(i.WM_GetWindowRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_GetWindowRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[67]"></a>WM_HandlePID</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, wmtouch.o(i.WM_HandlePID))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = WM_HandlePID &rArr; WM__SendTouchMessage &rArr; WM__SendPIDMessage &rArr; WM__SendMessageIfEnabled &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_GetState
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPosition
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsInModalArea
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2Win
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveCriticalHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_pid.o(i._PID_Load)
</UL>
<P><STRONG><a name="[2d8]"></a>WM_HasCaptured</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_hascaptured.o(i.WM_HasCaptured))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[222]"></a>WM_HideWindow</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wm_hide.o(i.WM_HideWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = WM_HideWindow &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateAreaBelow
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScrollbar
</UL>

<P><STRONG><a name="[14c]"></a>WM_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wm.o(i.WM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = WM_Init &rArr; WM_CreateWindow &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindow
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[24a]"></a>WM_InvalidateArea</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wm.o(i.WM_InvalidateArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateAreaBelow
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>

<P><STRONG><a name="[1ea]"></a>WM_InvalidateRect</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, wm.o(i.WM_InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateAreaBelow
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateItemAndBelow
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateItem
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateInsideArea
</UL>

<P><STRONG><a name="[c4]"></a>WM_InvalidateWindow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm.o(i.WM_InvalidateWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetTransState
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetFont
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetBkColor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetText
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetFont
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetBkColor
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__SetValue
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowDescs
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbInvalidateOne
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InvalidateWindowAndDescs
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__InvalidatePartner
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnSetScrollState
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnKey
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
</UL>

<P><STRONG><a name="[277]"></a>WM_InvalidateWindowDescs</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm_show.o(i.WM_InvalidateWindowDescs))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = WM_InvalidateWindowDescs &rArr;  WM_InvalidateWindowDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowDescs
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowDescs
</UL>

<P><STRONG><a name="[278]"></a>WM_IsFocussable</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wm_isfocussable.o(i.WM_IsFocussable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WM_IsFocussable &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[221]"></a>WM_IsVisible</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_isvisible.o(i.WM_IsVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_IsVisible &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[279]"></a>WM_IsWindow</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm_iswindow.o(i.WM_IsWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_IsWindow &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendPIDMessage
</UL>

<P><STRONG><a name="[27a]"></a>WM_MoveWindow</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_move.o(i.WM_MoveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
</UL>

<P><STRONG><a name="[20a]"></a>WM_NotifyParent</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, wm_notifyparent.o(i.WM_NotifyParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WM_NotifyParent &rArr; WM_SendToParent &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ButtonReleased
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ButtonPressed
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateAttached
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__SetValue
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScrollbarReleased
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScrollbarPressed
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[169]"></a>WM_OnKey</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, wm_onkey.o(i.WM_OnKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
</UL>

<P><STRONG><a name="[270]"></a>WM_ReleaseCapture</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_setcapture.o(i.WM_ReleaseCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WM_ReleaseCapture &rArr; WM__ReleaseCapture &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ReleaseCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[27e]"></a>WM_ResizeWindow</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, wm_resizewindow.o(i.WM_ResizeWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateArea
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetYSize
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetXSize
</UL>

<P><STRONG><a name="[281]"></a>WM_Screen2hWin</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm_screen2win.o(i.WM_Screen2hWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_Screen2hWin &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2Win
</UL>

<P><STRONG><a name="[250]"></a>WM_SelectWindow</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm.o(i.WM_SelectWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_SelectWindow &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[25e]"></a>WM_SendMessage</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm.o(i.WM_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocussable
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetBkColor
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollState
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NotifyOwner
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectEx
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetScrollState
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ReleaseCapture
</UL>

<P><STRONG><a name="[21d]"></a>WM_SendMessageNoPara</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm_sendmessagenopara.o(i.WM_SendMessageNoPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_SendMessageNoPara &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__InvalidatePartner
</UL>

<P><STRONG><a name="[252]"></a>WM_SendToParent</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_sendtoparent.o(i.WM_SendToParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WM_SendToParent &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
</UL>

<P><STRONG><a name="[284]"></a>WM_SetCapture</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_setcapture.o(i.WM_SetCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = WM_SetCapture &rArr; WM__ReleaseCapture &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ReleaseCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[285]"></a>WM_SetDefault</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm.o(i.WM_SetDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WM_SetDefault &rArr; GL_SetDefault &rArr; GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
</UL>

<P><STRONG><a name="[234]"></a>WM_SetFocus</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, wm_setfocus.o(i.WM_SetFocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = WM_SetFocus &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[286]"></a>WM_SetHasTrans</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wm_settrans.o(i.WM_SetHasTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = WM_SetHasTrans &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetTransState
</UL>

<P><STRONG><a name="[247]"></a>WM_SetScrollState</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wm_setscrollstate.o(i.WM_SetScrollState))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WM_SetScrollState &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__SetScrollState
</UL>

<P><STRONG><a name="[287]"></a>WM_SetScrollValue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wm_checkscrollpos.o(i.WM_SetScrollValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM_SetScrollValue
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CheckScrollBounds
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKey
</UL>

<P><STRONG><a name="[289]"></a>WM_SetScrollbarH</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_setscrollbar.o(i.WM_SetScrollbarH))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = WM_SetScrollbarH &rArr; WM__SetScrollbarH &rArr; _SetScrollbar &rArr; SCROLLBAR_CreateAttached &rArr; SCROLLBAR_CreateEx &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SetScrollbarH
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAutoScroll
</UL>

<P><STRONG><a name="[28b]"></a>WM_SetScrollbarV</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_setscrollbar.o(i.WM_SetScrollbarV))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = WM_SetScrollbarV &rArr; WM__SetScrollbarV &rArr; _SetScrollbar &rArr; SCROLLBAR_CreateAttached &rArr; SCROLLBAR_CreateEx &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SetScrollbarV
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAutoScroll
</UL>

<P><STRONG><a name="[cb]"></a>WM_SetTransState</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, wm_settransstate.o(i.WM_SetTransState))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WM_SetTransState &rArr; WM_SetHasTrans &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetBkColor
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetBkColor
</UL>

<P><STRONG><a name="[127]"></a>WM_SetUserClipRect</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_setusercliprect.o(i.WM_SetUserClipRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_SetUserClipRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[239]"></a>WM_SetXSize</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wm_setxsize.o(i.WM_SetXSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WM_SetXSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetWidth
</UL>

<P><STRONG><a name="[23a]"></a>WM_SetYSize</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wm_setysize.o(i.WM_SetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WM_SetYSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetWidth
</UL>

<P><STRONG><a name="[223]"></a>WM_ShowWindow</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm_show.o(i.WM_ShowWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WM_ShowWindow &rArr; WM_InvalidateWindowDescs &rArr;  WM_InvalidateWindowDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowDescs
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[28d]"></a>WM__ActivateClipRect</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm.o(i.WM__ActivateClipRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
</UL>

<P><STRONG><a name="[26b]"></a>WM__AddCriticalHandle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_criticalhandle.o(i.WM__AddCriticalHandle))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[274]"></a>WM__Client2Screen</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wm.o(i.WM__Client2Screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__Client2Screen
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EffectRequiresRedraw
</UL>

<P><STRONG><a name="[276]"></a>WM__ClipAtParentBorders</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm.o(i.WM__ClipAtParentBorders))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__ClipAtParentBorders
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[258]"></a>WM__DetachWindow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm.o(i.WM__DetachWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WM__DetachWindow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateArea
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[25d]"></a>WM__ForEachDesc</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, wm__foreachdesc.o(i.WM__ForEachDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = WM__ForEachDesc &rArr;  WM_ForEachDesc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
</UL>

<P><STRONG><a name="[245]"></a>WM__GetClientRectWin</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm.o(i.WM__GetClientRectWin))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
</UL>

<P><STRONG><a name="[291]"></a>WM__GetFirstSibling</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm__getfirstsibling.o(i.WM__GetFirstSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM__GetFirstSibling &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
</UL>

<P><STRONG><a name="[112]"></a>WM__GetNextIVR</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, wm.o(i.WM__GetNextIVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WM__GetNextIVR &rArr; _FindNext_IVR &rArr; _Findx0 &rArr;  _Findx0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGraph
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
</UL>

<P><STRONG><a name="[249]"></a>WM__GetPrevSibling</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm__getprevsibling.o(i.WM__GetPrevSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WM__GetPrevSibling &rArr; WM__GetFirstSibling &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
</UL>

<P><STRONG><a name="[111]"></a>WM__InitIVRSearch</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, wm.o(i.WM__InitIVRSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; _FindNext_IVR &rArr; _Findx0 &rArr;  _Findx0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetInvalidRectAbs
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGraph
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
</UL>

<P><STRONG><a name="[24f]"></a>WM__InsertWindowIntoList</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, wm.o(i.WM__InsertWindowIntoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WM__InsertWindowIntoList
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BringToTop
</UL>

<P><STRONG><a name="[272]"></a>WM__InvalidateAreaBelow</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm.o(i.WM__InvalidateAreaBelow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateArea
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[294]"></a>WM__IsAncestor</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm__isancestor.o(i.WM__IsAncestor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WM__IsAncestor
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsInModalArea
</UL>

<P><STRONG><a name="[295]"></a>WM__IsEnabled</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm__isenabled.o(i.WM__IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnKey
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
</UL>

<P><STRONG><a name="[26d]"></a>WM__IsInModalArea</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wmtouch.o(i.WM__IsInModalArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__IsInModalArea &rArr; WM__IsAncestor
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[2de]"></a>WM__IsInWindow</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, wm_screen2win.o(i.WM__IsInWindow))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>

<P><STRONG><a name="[254]"></a>WM__IsWindow</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm.o(i.WM__IsWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__IsWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
</UL>

<P><STRONG><a name="[27b]"></a>WM__MoveWindow</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, wm_move.o(i.WM__MoveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateArea
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
</UL>

<P><STRONG><a name="[297]"></a>WM__PaintWinAndOverlays</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm.o(i.WM__PaintWinAndOverlays))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = WM__PaintWinAndOverlays &rArr; _PaintTransTopSiblings &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransTopSiblings
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[2cd]"></a>WM__RectIsNZ</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wm.o(i.WM__RectIsNZ))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[271]"></a>WM__RemoveCriticalHandle</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wm_criticalhandle.o(i.WM__RemoveCriticalHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__RemoveCriticalHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[259]"></a>WM__RemoveFromLinList</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm.o(i.WM__RemoveFromLinList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WM__RemoveFromLinList
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[290]"></a>WM__RemoveWindowFromList</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, wm.o(i.WM__RemoveWindowFromList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__RemoveWindowFromList
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BringToTop
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
</UL>

<P><STRONG><a name="[27c]"></a>WM__SendMessage</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm__sendmessage.o(i.WM__SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
</UL>

<P><STRONG><a name="[26e]"></a>WM__SendMessageIfEnabled</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm__sendmessageifenabled.o(i.WM__SendMessageIfEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = WM__SendMessageIfEnabled &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendPIDMessage
</UL>

<P><STRONG><a name="[283]"></a>WM__SendMessageNoPara</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, wm__sendmessagenopara.o(i.WM__SendMessageNoPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__SendMessageNoPara
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
</UL>

<P><STRONG><a name="[251]"></a>WM__SendMsgNoData</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, wm.o(i.WM__SendMsgNoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WM__SendMsgNoData &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[29b]"></a>WM__SendPIDMessage</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wmtouch.o(i.WM__SendPIDMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = WM__SendPIDMessage &rArr; WM__SendMessageIfEnabled &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
</UL>

<P><STRONG><a name="[26f]"></a>WM__SendTouchMessage</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wmtouch.o(i.WM__SendTouchMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = WM__SendTouchMessage &rArr; WM__SendPIDMessage &rArr; WM__SendMessageIfEnabled &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendPIDMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[28a]"></a>WM__SetScrollbarH</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm_setscrollbar.o(i.WM__SetScrollbarH))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = WM__SetScrollbarH &rArr; _SetScrollbar &rArr; SCROLLBAR_CreateAttached &rArr; SCROLLBAR_CreateEx &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScrollbar
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetScrollbarH
</UL>

<P><STRONG><a name="[28c]"></a>WM__SetScrollbarV</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm_setscrollbar.o(i.WM__SetScrollbarV))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = WM__SetScrollbarV &rArr; _SetScrollbar &rArr; SCROLLBAR_CreateAttached &rArr; SCROLLBAR_CreateEx &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScrollbar
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetScrollbarV
</UL>

<P><STRONG><a name="[280]"></a>WM__UpdateChildPositions</STRONG> (Thumb, 390 bytes, Stack size 80 bytes, wm__updatechildpositions.o(i.WM__UpdateChildPositions))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateChildPostions
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[197]"></a>_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FSMC_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[21e]"></a>_ExecCalibration</STRONG> (Thumb, 466 bytes, Stack size 64 bytes, guidemo_touch.o(i._ExecCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = _ExecCalibration &rArr; GUI_Delay &rArr; GUI_Exec &rArr; GUI_Exec1 &rArr; WM_Exec &rArr; WM_Exec1 &rArr; _DrawNext &rArr; _Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_SetDefaultCalibration
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_GetyPhys
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_GetxPhys
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_GetState
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Calibrate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispNextLine
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Calibrate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[2e0]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[335]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[226]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
</UL>

<P><STRONG><a name="[336]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[337]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[338]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[339]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[33a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c4]"></a>delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, glcd.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initializtion
</UL>

<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = main &rArr; GUI_Init &rArr; WM_Init &rArr; WM_CreateWindow &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FSMC_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initializtion
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[17e]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVoltTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTouchTask
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
</UL>

<P><STRONG><a name="[2e7]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>osKernelSysTick</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
</UL>

<P><STRONG><a name="[182]"></a>osMutexCreate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
</UL>

<P><STRONG><a name="[184]"></a>osMutexRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>

<P><STRONG><a name="[183]"></a>osMutexWait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
</UL>

<P><STRONG><a name="[181]"></a>osSemaphoreCreate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
</UL>

<P><STRONG><a name="[22c]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1f6]"></a>osThreadCreate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTButtonTask
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[17f]"></a>osThreadGetId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsis_os.o(i.osThreadGetId))
<BR><BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
</UL>

<P><STRONG><a name="[30f]"></a>pvPortMalloc</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[31c]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[30a]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[2f9]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[2fe]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[309]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[2fb]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[2fa]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[2fd]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2ff]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[307]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[317]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[312]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>

<P><STRONG><a name="[2e8]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[30e]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[314]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[315]"></a>vTaskPriorityInherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[31d]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2e9]"></a>vTaskStartScheduler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[301]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[a0]"></a>vTaskSwitchContext</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[316]"></a>xPortStartScheduler</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2f4]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[2ed]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[2f2]"></a>xQueueGenericCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[2f1]"></a>xQueueGenericReceive</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[31b]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[2ef]"></a>xQueueGenericSend</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[2ee]"></a>xQueueGiveFromISR</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[2f0]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[31e]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2f6]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2f7]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[2f3]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2ec]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[2eb]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[31a]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[306]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[30d]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[302]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[19f]"></a>HAL_FSMC_MspInit</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, fsmc.o(i.HAL_FSMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
</UL>

<P><STRONG><a name="[310]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[311]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[304]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[305]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[30b]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[30c]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2f8]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[2fc]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[300]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[303]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[6b]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[308]"></a>prvInitialiseNewTask</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[31f]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[2ea]"></a>inHandlerMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[2f5]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[6a]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[1a6]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[194]"></a>ADC_Init</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[19d]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[19c]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[1ae]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[1ad]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[1b9]"></a>UART_SetConfig</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1bc]"></a>LCD_SetCursor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, glcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPoint
</UL>

<P><STRONG><a name="[d2]"></a>DrawBitLine2BPP</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, glcd_ucgui.o(i.DrawBitLine2BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DrawBitLine2BPP &rArr; LCD_SetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>

<P><STRONG><a name="[d3]"></a>DrawBitLine4BPP</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, glcd_ucgui.o(i.DrawBitLine4BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DrawBitLine4BPP &rArr; LCD_SetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>

<P><STRONG><a name="[20c]"></a>DelayUS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, touchpanel.o(i.DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RD_AD
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_GetAdXY
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X
</UL>

<P><STRONG><a name="[20b]"></a>RD_AD</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, touchpanel.o(i.RD_AD))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RD_AD &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X
</UL>

<P><STRONG><a name="[210]"></a>WR_CMD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, touchpanel.o(i.WR_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WR_CMD &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X
</UL>

<P><STRONG><a name="[e0]"></a>_DisplayTime</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ucgui_user_graph.o(i._DisplayTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _DisplayTime &rArr; GUI_DispDecSpace &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Graph
</UL>

<P><STRONG><a name="[61]"></a>_Draw_N</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, ucgui_user_graph.o(i._Draw_N))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _Draw_N &rArr; GUI_ClearRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGraph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ucgui_user_graph.o(i.Draw_Graph)
</UL>
<P><STRONG><a name="[18d]"></a>_LabelMS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ucgui_user_graph.o(i._LabelMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _LabelMS &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graph_Init
</UL>

<P><STRONG><a name="[18c]"></a>_ShowText</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ucgui_user_graph.o(i._ShowText))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _ShowText &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graph_Init
</UL>

<P><STRONG><a name="[2b0]"></a>_Calibrate</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, guidemo_touch.o(i._Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Calibrate &rArr; _Log2Phys
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Log2Phys
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecCalibration
</UL>

<P><STRONG><a name="[2b1]"></a>_Log2Phys</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, guidemo_touch.o(i._Log2Phys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Log2Phys
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Calibrate
</UL>

<P><STRONG><a name="[131]"></a>_DrawRect</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gui2dlib.o(i._DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawRect &rArr; LCD_DrawVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>

<P><STRONG><a name="[12f]"></a>_DrawGraph</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, gui_drawgraph.o(i._DrawGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _DrawGraph &rArr; LCD_DrawVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGraph
</UL>

<P><STRONG><a name="[146]"></a>_GotoX</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_goto.o(i._GotoX))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>

<P><STRONG><a name="[147]"></a>_GotoY</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_goto.o(i._GotoY))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>

<P><STRONG><a name="[176]"></a>_AD2X</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_touch_driveranalog.o(i._AD2X))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[177]"></a>_AD2Y</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_touch_driveranalog.o(i._AD2Y))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[172]"></a>_Log2Phys</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui_touch_driveranalog.o(i._Log2Phys))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Log2Phys
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Calibrate
</UL>

<P><STRONG><a name="[175]"></a>_StoreUnstable</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gui_touch_driveranalog.o(i._StoreUnstable))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _StoreUnstable &rArr; GUI_TOUCH_StoreUnstable &rArr; GUI_TOUCH_StoreState &rArr; GUI_TOUCH_StoreStateEx &rArr; GUI_PID_StoreState &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreUnstable
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[f6]"></a>_Alloc</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, guialloc.o(i._Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Alloc &rArr; _CreateHole &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Size2LegalSize
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindHole
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFreeHandle
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateHole
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
</UL>

<P><STRONG><a name="[fc]"></a>_CheckInit</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, guialloc.o(i._CheckInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _CheckInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[2a3]"></a>_CreateHole</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, guialloc.o(i._CreateHole))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _CreateHole &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[2a1]"></a>_FindFreeHandle</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, guialloc.o(i._FindFreeHandle))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[2a2]"></a>_FindHole</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, guialloc.o(i._FindHole))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _FindHole
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[f9]"></a>_Free</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, guialloc.o(i._Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _Free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>

<P><STRONG><a name="[fe]"></a>_GetSize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guialloc.o(i._GetSize))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetSize
</UL>

<P><STRONG><a name="[2a0]"></a>_Size2LegalSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guialloc.o(i._Size2LegalSize))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[14a]"></a>_InitContext</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, guicore.o(i._InitContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _InitContext &rArr; LCD_SetColor &rArr; LCD_Color2Index
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_GetRect
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[15c]"></a>_Min</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_banding.o(i._Min))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[2a5]"></a>_ButtonPressed</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, button.o(i._ButtonPressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _ButtonPressed &rArr; WIDGET_OrState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[2a6]"></a>_ButtonReleased</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, button.o(i._ButtonReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _ButtonReleased &rArr; WIDGET_AndState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[b9]"></a>_Delete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, button.o(i._Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _Delete &rArr; GUI_ALLOC_FreePtr &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
</UL>

<P><STRONG><a name="[b7]"></a>_OnTouch</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, button.o(i._OnTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _OnTouch &rArr; _ButtonReleased &rArr; WIDGET_AndState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ButtonReleased
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ButtonPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
</UL>

<P><STRONG><a name="[b8]"></a>_Paint</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, button.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _Paint &rArr; GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI_GetClientRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
</UL>

<P><STRONG><a name="[1cd]"></a>_AddKey</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, listbox.o(i._AddKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = _AddKey &rArr; LISTBOX_IncSel &rArr; _MoveSel &rArr; LISTBOX_SetSel &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetScrollValue
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateInsideArea
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_UpdateScrollers
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_IncSel
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_DecSel
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ToggleMultiSel
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SelectByKey
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsAlphaNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddKey
</UL>

<P><STRONG><a name="[1e8]"></a>_CalcScrollParas</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, listbox.o(i._CalcScrollParas))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _CalcScrollParas &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetNumItems
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateScrollPos
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNumVisItems
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetContentsSizeX
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_UpdateScrollers
</UL>

<P><STRONG><a name="[2b2]"></a>_CallOwnerDraw</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, listbox.o(i._CallOwnerDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemSizeY
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemSizeX
</UL>

<P><STRONG><a name="[2c7]"></a>_FreeAttached</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, listbox.o(i._FreeAttached))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _FreeAttached &rArr; GUI_ARRAY_Delete &rArr; GUI_ALLOC_FreePtr &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
</UL>

<P><STRONG><a name="[2af]"></a>_GetContentsSizeX</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, listbox.o(i._GetContentsSizeX))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _GetContentsSizeX &rArr; _GetItemSizeX &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetNumItems
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemSizeX
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAutoScroll
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollParas
</UL>

<P><STRONG><a name="[2cb]"></a>_GetItemFromPos</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, listbox.o(i._GetItemFromPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _GetItemFromPos &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetNumItems
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemSizeY
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
</UL>

<P><STRONG><a name="[1eb]"></a>_GetItemPosY</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, listbox.o(i._GetItemPosY))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetNumItems
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemSizeY
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateItemAndBelow
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateItem
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsPartiallyVis
</UL>

<P><STRONG><a name="[2ca]"></a>_GetItemSizeX</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, listbox.o(i._GetItemSizeX))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _GetItemSizeX &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItem
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CallOwnerDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetContentsSizeX
</UL>

<P><STRONG><a name="[1ec]"></a>_GetItemSizeY</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, listbox.o(i._GetItemSizeY))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItem
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CallOwnerDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateItem
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsPartiallyVis
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNumVisItems
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemPosY
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemFromPos
</UL>

<P><STRONG><a name="[2ae]"></a>_GetNumVisItems</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, listbox.o(i._GetNumVisItems))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _GetNumVisItems &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetNumItems
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetYSize
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemSizeY
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAutoScroll
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollParas
</UL>

<P><STRONG><a name="[2cc]"></a>_GetYSize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, listbox.o(i._GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _GetYSize &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsPartiallyVis
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNumVisItems
</UL>

<P><STRONG><a name="[29e]"></a>_IsAlphaNum</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, listbox.o(i._IsAlphaNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _IsAlphaNum
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKey
</UL>

<P><STRONG><a name="[2cf]"></a>_IsPartiallyVis</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, listbox.o(i._IsPartiallyVis))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetNumItems
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetYSize
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemSizeY
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemPosY
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateScrollPos
</UL>

<P><STRONG><a name="[62]"></a>_LISTBOX_Callback</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, listbox.o(i._LISTBOX_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = _LISTBOX_Callback &rArr; LISTBOX_AddKey &rArr; _AddKey &rArr; LISTBOX_IncSel &rArr; _MoveSel &rArr; LISTBOX_SetSel &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarV
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarH
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollState
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateInsideArea
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_UpdateScrollers
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetSel
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_AddKey
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ToggleMultiSel
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NotifyOwner
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemFromPos
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FreeAttached
</UL>
<BR>[Address Reference Count : 1]<UL><LI> listbox.o(i.LISTBOX_CreateEx)
</UL>
<P><STRONG><a name="[1e7]"></a>_ManageAutoScroll</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, listbox.o(i._ManageAutoScroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _ManageAutoScroll &rArr; WM_SetScrollbarV &rArr; WM__SetScrollbarV &rArr; _SetScrollbar &rArr; SCROLLBAR_CreateAttached &rArr; SCROLLBAR_CreateEx &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetScrollbarV
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetScrollbarH
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__SetScrollbarWidth
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetNumItems
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNumVisItems
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetContentsSizeX
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_UpdateScrollers
</UL>

<P><STRONG><a name="[1d8]"></a>_MoveSel</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, listbox.o(i._MoveSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = _MoveSel &rArr; LISTBOX_SetSel &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_GetSel
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GethItem
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetNumItems
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetSel
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_IncSel
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_DecSel
</UL>

<P><STRONG><a name="[1e6]"></a>_NotifyOwner</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, listbox.o(i._NotifyOwner))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _NotifyOwner &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetSel
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ToggleMultiSel
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
</UL>

<P><STRONG><a name="[2d0]"></a>_OnPaint</STRONG> (Thumb, 262 bytes, Stack size 72 bytes, listbox.o(i._OnPaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = _OnPaint &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDown
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRectEx
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetNumItems
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_OwnerDraw
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemSizeY
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
</UL>

<P><STRONG><a name="[2d1]"></a>_OnTouch</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, listbox.o(i._OnTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _OnTouch &rArr; _NotifyOwner &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NotifyOwner
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
</UL>

<P><STRONG><a name="[29f]"></a>_SelectByKey</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, listbox.o(i._SelectByKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _SelectByKey &rArr; LISTBOX_SetSel &rArr; _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetpString
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__GetNumItems
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetSel
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKey
</UL>

<P><STRONG><a name="[29d]"></a>_ToggleMultiSel</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, listbox.o(i._ToggleMultiSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _ToggleMultiSel &rArr; LISTBOX__InvalidateItem &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GethItem
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX__InvalidateItem
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NotifyOwner
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LISTBOX_Callback
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKey
</UL>

<P><STRONG><a name="[2ce]"></a>_Tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, listbox.o(i._Tolower))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SelectByKey
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsAlphaNum
</UL>

<P><STRONG><a name="[1e5]"></a>_UpdateScrollPos</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, listbox.o(i._UpdateScrollPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = _UpdateScrollPos &rArr; _IsPartiallyVis &rArr; _GetItemPosY &rArr; _GetItemSizeY &rArr; _CallOwnerDraw &rArr; LISTBOX_OwnerDraw &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CheckScrollBounds
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__SetScrollState
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsPartiallyVis
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LISTBOX_SetSel
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollParas
</UL>

<P><STRONG><a name="[2d2]"></a>_OnKey</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, radio.o(i._OnKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _OnKey &rArr; RADIO_Inc &rArr; RADIO_AddValue &rArr; RADIO_SetValue &rArr; RADIO__SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Inc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Dec
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RADIO_Callback
</UL>

<P><STRONG><a name="[2d4]"></a>_OnPaint</STRONG> (Thumb, 452 bytes, Stack size 96 bytes, radio.o(i._OnPaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _OnPaint &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetClientRect
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawFocusRect
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontInfo
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResizeRect
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItem
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RADIO_Callback
</UL>

<P><STRONG><a name="[2d7]"></a>_OnTouch</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, radio.o(i._OnTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _OnTouch &rArr; RADIO_SetValue &rArr; RADIO__SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocussable
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RADIO_Callback
</UL>

<P><STRONG><a name="[63]"></a>_RADIO_Callback</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, radio.o(i._RADIO_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _RADIO_Callback &rArr; WIDGET_HandleActive &rArr; _UpdateChildPostions &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnKey
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_Delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RADIO_CreateEx)
</UL>
<P><STRONG><a name="[2d5]"></a>_ResizeRect</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, radio.o(i._ResizeRect))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPaint
</UL>

<P><STRONG><a name="[255]"></a>ResetNextDrawWin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm.o(i.ResetNextDrawWin))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[293]"></a>WM__GetInvalidRectAbs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm.o(i.WM__GetInvalidRectAbs))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>

<P><STRONG><a name="[24e]"></a>_AddToLinList</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wm.o(i._AddToLinList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _AddToLinList
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[256]"></a>_CheckCriticalHandles</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm.o(i._CheckCriticalHandles))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[257]"></a>_DeleteAllChildren</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm.o(i._DeleteAllChildren))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = _DeleteAllChildren &rArr;  WM_DeleteWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[28f]"></a>_DesktopHandle2Index</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm.o(i._DesktopHandle2Index))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
</UL>

<P><STRONG><a name="[25b]"></a>_DrawNext</STRONG> (Thumb, 82 bytes, Stack size 112 bytes, wm.o(i._DrawNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = _DrawNext &rArr; _Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W_M
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec1
</UL>

<P><STRONG><a name="[292]"></a>_FindNext_IVR</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, wm.o(i._FindNext_IVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _FindNext_IVR &rArr; _Findx0 &rArr;  _Findx0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>

<P><STRONG><a name="[2c5]"></a>_Findx0</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, wm.o(i._Findx0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = _Findx0 &rArr;  _Findx0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>

<P><STRONG><a name="[2c6]"></a>_Findx1</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, wm.o(i._Findx1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Findx1 &rArr;  _Findx1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>

<P><STRONG><a name="[2c4]"></a>_Findy1</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, wm.o(i._Findy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Findy1 &rArr;  _Findy1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>

<P><STRONG><a name="[2df]"></a>_GethDrawWin</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm.o(i._GethDrawWin))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
</UL>

<P><STRONG><a name="[273]"></a>_Invalidate1Abs</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, wm.o(i._Invalidate1Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Invalidate1Abs &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RectIsNZ
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateArea
</UL>

<P><STRONG><a name="[2bd]"></a>_Paint</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, wm.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
</UL>

<P><STRONG><a name="[298]"></a>_Paint1</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, wm.o(i._Paint1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _Paint1 &rArr; WM_SetDefault &rArr; GL_SetDefault &rArr; GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
</UL>

<P><STRONG><a name="[2dd]"></a>_Paint1Trans</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, wm.o(i._Paint1Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _Paint1Trans &rArr; _Paint1 &rArr; WM_SetDefault &rArr; GL_SetDefault &rArr; GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransTopSiblings
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>

<P><STRONG><a name="[299]"></a>_PaintTransChildren</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, wm.o(i._PaintTransChildren))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + In Cycle
<LI>Call Chain = _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransTopSiblings
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>

<P><STRONG><a name="[29a]"></a>_PaintTransTopSiblings</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, wm.o(i._PaintTransTopSiblings))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _PaintTransTopSiblings &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[28e]"></a>_SetClipRectUserIntersect</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wm.o(i._SetClipRectUserIntersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GethDrawWin
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>

<P><STRONG><a name="[68]"></a>_cbPaintMemDev</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wm.o(i._cbPaintMemDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _cbPaintMemDev &rArr; WM__PaintWinAndOverlays &rArr; _PaintTransTopSiblings &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i._Paint)
</UL>
<P><STRONG><a name="[65]"></a>cbBackWin</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wm.o(i.cbBackWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = cbBackWin &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM_Init)
</UL>
<P><STRONG><a name="[24b]"></a>_BringToTop</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wm_bringtotop.o(i._BringToTop))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _BringToTop &rArr; _InvalidateWindowAndDescs &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InvalidateWindowAndDescs
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
</UL>

<P><STRONG><a name="[2a4]"></a>_InvalidateWindowAndDescs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_bringtotop.o(i._InvalidateWindowAndDescs))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _InvalidateWindowAndDescs &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BringToTop
</UL>

<P><STRONG><a name="[66]"></a>_cbInvalidateOne</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_bringtotop.o(i._cbInvalidateOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _cbInvalidateOne &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_bringtotop.o(i._InvalidateWindowAndDescs)
</UL>
<P><STRONG><a name="[108]"></a>_Check_NegLong</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gui_adddecshift.o(i._Check_NegLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Check_NegLong
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>

<P><STRONG><a name="[12d]"></a>_DrawFocusRect</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gui_drawfocusrect.o(i._DrawFocusRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DrawFocusRect &rArr; LCD_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
</UL>

<P><STRONG><a name="[166]"></a>_PID_Load</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_pid.o(i._PID_Load))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
</UL>

<P><STRONG><a name="[7b]"></a>_CalcSizeOfChar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._CalcSizeOfChar))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>_Encode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._Encode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>_GetCharCode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._GetCharCode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>_GetCharSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._GetCharSize))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>_DispLine</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, guicharline.o(i._DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[ec]"></a>GUIPROP_FindChar</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, guicharp.o(i.GUIPROP_FindChar))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_IsInFont
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_GetCharDistX
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[14f]"></a>_GetTaskNo</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, guitask.o(i._GetTaskNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetTaskNo
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[1c9]"></a>_GetColorIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i._GetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
</UL>

<P><STRONG><a name="[60]"></a>_CHECKBOX_Callback</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, checkbox.o(i._CHECKBOX_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _CHECKBOX_Callback &rArr; WIDGET_HandleActive &rArr; _UpdateChildPostions &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> checkbox.o(i.CHECKBOX_CreateEx)
</UL>
<P><STRONG><a name="[2a7]"></a>_OnKey</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, checkbox.o(i._OnKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _OnKey &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CHECKBOX_Callback
</UL>

<P><STRONG><a name="[2a9]"></a>_OnTouch</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, checkbox.o(i._OnTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _OnTouch &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCapture
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HasCaptured
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CHECKBOX_Callback
</UL>

<P><STRONG><a name="[2a8]"></a>_Paint</STRONG> (Thumb, 464 bytes, Stack size 56 bytes, checkbox.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _Paint &rArr; GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI_GetClientRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawFocusRect
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDownRect
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CHECKBOX_Callback
</UL>

<P><STRONG><a name="[2aa]"></a>_CalcPositions</STRONG> (Thumb, 310 bytes, Stack size 64 bytes, scrollbar.o(i._CalcPositions))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _CalcPositions &rArr; WM_GetScrollbarV &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarV
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarH
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DivideRound
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WIDGET__RECT2VRECT
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetArrowSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[2be]"></a>_DrawTriangle</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, scrollbar.o(i._DrawTriangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _DrawTriangle &rArr; GUI_DrawVLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[2ac]"></a>_GetArrowSize</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, scrollbar.o(i._GetArrowSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetArrowSize
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetYSize
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[2d3]"></a>_OnKey</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, scrollbar.o(i._OnKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _OnKey &rArr; SCROLLBAR_Inc &rArr; SCROLLBAR_AddValue &rArr; SCROLLBAR_SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Inc
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Dec
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCROLLBAR_Callback
</UL>

<P><STRONG><a name="[2d6]"></a>_OnSetScrollState</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, scrollbar.o(i._OnSetScrollState))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _OnSetScrollState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCROLLBAR_Callback
</UL>

<P><STRONG><a name="[2d9]"></a>_OnTouch</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, scrollbar.o(i._OnTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _OnTouch &rArr; _CalcPositions &rArr; WM_GetScrollbarV &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DivideRound
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScrollbarReleased
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScrollbarPressed
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCROLLBAR_Callback
</UL>

<P><STRONG><a name="[2dc]"></a>_Paint</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, scrollbar.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _Paint &rArr; _CalcPositions &rArr; WM_GetScrollbarV &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetClientRect
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillRectEx
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawUpRect
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTriangle
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SCROLLBAR_Callback
</UL>

<P><STRONG><a name="[64]"></a>_SCROLLBAR_Callback</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, scrollbar.o(i._SCROLLBAR_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _SCROLLBAR_Callback &rArr; WIDGET_HandleActive &rArr; _UpdateChildPostions &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__InvalidatePartner
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnSetScrollState
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar.o(i.SCROLLBAR_CreateEx)
</UL>
<P><STRONG><a name="[2da]"></a>_ScrollbarPressed</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, scrollbar.o(i._ScrollbarPressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _ScrollbarPressed &rArr; WIDGET_OrState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[2db]"></a>_ScrollbarReleased</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, scrollbar.o(i._ScrollbarReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _ScrollbarReleased &rArr; WIDGET_AndState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[2ab]"></a>_WIDGET__RECT2VRECT</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, scrollbar.o(i._WIDGET__RECT2VRECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _WIDGET__RECT2VRECT
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[23f]"></a>_EffectRequiresRedraw</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, widget.o(i._EffectRequiresRedraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _EffectRequiresRedraw &rArr; WM__Client2Screen
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDownRect
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawUpRect
</UL>

<P><STRONG><a name="[233]"></a>_UpdateChildPostions</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, widget.o(i._UpdateChildPostions))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _UpdateChildPostions &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
</UL>

<P><STRONG><a name="[260]"></a>_GetDialogItem</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wm_getdialogitem.o(i._GetDialogItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + In Cycle
<LI>Call Chain = _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>

<P><STRONG><a name="[29c]"></a>_SetScrollbar</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wm_setscrollbar.o(i._SetScrollbar))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _SetScrollbar &rArr; SCROLLBAR_CreateAttached &rArr; SCROLLBAR_CreateEx &rArr; WM_CreateWindowAsChild &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateAreaBelow &rArr; WM_InvalidateArea &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateAttached
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SetScrollbarV
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SetScrollbarH
</UL>

<P><STRONG><a name="[26c]"></a>_Screen2Win</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wmtouch.o(i._Screen2Win))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _Screen2Win &rArr; WM_Screen2hWin &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[10e]"></a>_CalcRect</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, guicurs.o(i._CalcRect))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPosition
</UL>

<P><STRONG><a name="[10c]"></a>_GetPixelIndex</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, guicurs.o(i._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetPixelIndex &rArr; LCD_L0_GetPixelIndex &rArr; LCD_GetPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPosition
</UL>

<P><STRONG><a name="[10d]"></a>_Log2Phys</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, guicurs.o(i._Log2Phys))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Log2Phys &rArr; LCD_Color2Index
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPosition
</UL>

<P><STRONG><a name="[10b]"></a>_SetPixelIndex</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, guicurs.o(i._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPosition
</UL>

<P><STRONG><a name="[2b5]"></a>_DrawBitLine16BPP_DDB</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, guidev_16.o(i._DrawBitLine16BPP_DDB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawBitLine16BPP_DDB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[2ba]"></a>_DrawBitLine1BPP</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, guidev_16.o(i._DrawBitLine1BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine1BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[2bb]"></a>_DrawBitLine2BPP</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, guidev_16.o(i._DrawBitLine2BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine2BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[2bc]"></a>_DrawBitLine4BPP</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, guidev_16.o(i._DrawBitLine4BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine4BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[2b9]"></a>_DrawBitLine8BPP</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, guidev_16.o(i._DrawBitLine8BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DrawBitLine8BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[2b6]"></a>_DrawBitLine8BPP_DDB</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, guidev_16.o(i._DrawBitLine8BPP_DDB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawBitLine8BPP_DDB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[8c]"></a>_DrawBitmap</STRONG> (Thumb, 340 bytes, Stack size 80 bytes, guidev_16.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _DrawBitmap &rArr; _DrawBitLine4BPP
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine8BPP_DDB
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine8BPP
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine16BPP_DDB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>_DrawHLine</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, guidev_16.o(i._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>_DrawVLine</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, guidev_16.o(i._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _DrawVLine &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>_FillRect</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, guidev_16.o(i._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset16
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>_GetPixelIndex</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, guidev_16.o(i._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GetPixelIndex &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>_SetPixelIndex</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, guidev_16.o(i._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _SetPixelIndex &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[2b8]"></a>_XY2PTR</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, guidev_16.o(i._XY2PTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[93]"></a>_XorPixel</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, guidev_16.o(i._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _XorPixel &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>GUI_USAGE_BM_AddHLine</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_AddHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_USAGE_BM_AddHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>GUI_USAGE_BM_AddPixel</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_AddPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI_USAGE_BM_AddPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>GUI_USAGE_BM_Clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_USAGE_BM_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>GUI_USAGE_BM_GetNextDirty</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_GetNextDirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_USAGE_BM_GetNextDirty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>_GUI_USAGE_BM_Delete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, guidev_usagebm.o(i._GUI_USAGE_BM_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _GUI_USAGE_BM_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>_WIDGET_EFFECT_3D_DrawDown</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, widget_effect_3d.o(i._WIDGET_EFFECT_3D_DrawDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _WIDGET_EFFECT_3D_DrawDown &rArr; _WIDGET_EFFECT_3D_DrawDownRect &rArr; GUI_DrawVLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WIDGET_EFFECT_3D_DrawDownRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_3d.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>_WIDGET_EFFECT_3D_DrawDownRect</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, widget_effect_3d.o(i._WIDGET_EFFECT_3D_DrawDownRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _WIDGET_EFFECT_3D_DrawDownRect &rArr; GUI_DrawVLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WIDGET_EFFECT_3D_DrawDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_3d.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>_WIDGET_EFFECT_3D_DrawUpRect</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, widget_effect_3d.o(i._WIDGET_EFFECT_3D_DrawUpRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _WIDGET_EFFECT_3D_DrawUpRect &rArr; GUI_DrawRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_EFFECT_3D_DrawUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_3d.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>_WIDGET_EFFECT_3D_GetRect</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, widget_effect_3d.o(i._WIDGET_EFFECT_3D_GetRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _WIDGET_EFFECT_3D_GetRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_3d.o(.constdata)
</UL>
<P><STRONG><a name="[282]"></a>_Screen2hWin</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, wm_screen2win.o(i._Screen2hWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _Screen2hWin &rArr;  _Screen2hWin (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsInWindow
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>

<P><STRONG><a name="[27d]"></a>WM__ReleaseCapture</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_setcapture.o(i.WM__ReleaseCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WM__ReleaseCapture &rArr; WM_SendMessage &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCapture
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
</UL>

<P><STRONG><a name="[296]"></a>_MoveDescendents</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wm_move.o(i._MoveDescendents))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + In Cycle
<LI>Call Chain = _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[2e2]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e1]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[2e5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[69]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
